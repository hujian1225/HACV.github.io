(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{262:function(t,e,s){"use strict";s.r(e);var n=s(0),i=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),s("p",[t._v("[TOC]")]),t._v(" "),t._m(4),t._m(5),t._v(" "),s("ul",[t._m(6),t._v(" "),t._m(7),t._v(" "),s("li",[s("font",{staticStyle:{background:"yellow"}},[t._v("guard，v.防范，n.防护装置")]),t._v("，防御式声明")],1),t._v(" "),s("li",[t._v("（"),s("font",{staticStyle:{background:"yellow"}},[t._v("class declarations，类-声明")]),t._v("）")],1),t._v(" "),s("li",[t._v("（"),s("font",{staticStyle:{background:"yellow"}},[t._v("class definition，类-定义")]),t._v("）")],1),t._v(" "),s("li",[t._v("（"),s("font",{staticStyle:{background:"yellow"}},[t._v("forward declarations，前置声明")]),t._v("）")],1),t._v(" "),s("li",[t._v("constructor（ctor，构造函数）")]),t._v(" "),s("li",[s("font",{staticStyle:{background:"yellow"}},[t._v("class with pointers members的"),s("strong",[t._v("必须")]),t._v("有"),s("code",[t._v("copy ctor")]),t._v("和"),s("code",[t._v("copy op=")])])],1),t._v(" "),t._m(8),t._v(" "),t._m(9)]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),s("h4",{attrs:{id:"『单个class设计』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#『单个class设计』"}},[t._v("#")]),t._v(" 『"),s("font",{staticStyle:{background:"yellow"}},[t._v("单个class设计")]),t._v("』")],1),t._v(" "),t._m(19),t._v(" "),t._m(20),s("h4",{attrs:{id:"『多个class』，之间有某种关联的话"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#『多个class』，之间有某种关联的话"}},[t._v("#")]),t._v(" 『"),s("font",{staticStyle:{background:"yellow"}},[t._v("多个class")]),t._v("』，之间有某种关联的话")],1),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),s("p",[s("font",{staticStyle:{background:"yellow"}},[t._v("现在，几乎学任何一个语言，都是这样子的，要把这2个分开来")]),t._v("。")],1),t._v(" "),s("p",[t._v("在比较早期，也许在C的时代。大家还关注的是语言的部分。当然，你也脱不开，标准库的部分，C也有它的标准库。")]),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),s("ul",[s("li",[s("p",[s("font",{staticStyle:{background:"yellow"}},[t._v("guard，v.防范，n.防护装置")])],1)]),t._v(" "),t._m(59)]),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),s("ul",[s("li",[s("p",[t._v("1—就是你要写的那个复数的『声明（"),s("font",{staticStyle:{background:"yellow"}},[t._v("class declarations，类-声明")]),t._v("）』")],1)]),t._v(" "),s("li",[s("p",[t._v("2—就是你要写的复数的『定义（"),s("font",{staticStyle:{background:"yellow"}},[t._v("class definition，类-定义")]),t._v("）』，这样讲不上很精准，但是可以这样理解。")],1)]),t._v(" "),s("li",[s("p",[t._v("1和2写好之后，你可能要检讨一下，有些东西『必须在前面先声明过，于是才会写0这个部分』（"),s("font",{staticStyle:{background:"yellow"}},[t._v("forward declarations，前置声明")]),t._v("）")],1)])]),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._v(" "),t._m(75),t._v(" "),t._m(76),t._v(" "),s("blockquote",[s("p",[t._v("inline的概念："),s("font",{staticStyle:{background:"yellow"}},[t._v("什么时候会产生inline呢？")])],1)]),t._v(" "),s("ul",[s("li",[t._v("1、你的函数"),s("font",{staticStyle:{background:"yellow"}},[t._v("在你的class的『本体』（class body）里面"),s("strong",[t._v("定义")])]),t._v("，它就形成了这样1种『inline』")],1),t._v(" "),s("li",[t._v("2、如果在外头『定义』，它就不是inline『重要，重要』，然后你就只能使用在外头的函数前面加上inline关键字去建议编译器")])]),t._v(" "),t._m(77),t._v(" "),s("p",[t._v("类似宏一样，但不不是完全一样，而是有它的特性，而没有它的缺点"),s("br"),t._v("\n总之：如果你的函数是个inline fuction会很好。会比较快，比较好"),s("br"),t._v("\n当然我们想说："),s("font",{staticStyle:{background:"yellow"}},[t._v("那所有函数，我们把他们写成"),s("code",[t._v("inline function")]),t._v("，那就最好了，的确是！")]),s("br"),t._v("\n但是：有些function，即时你说它是inline，编译器也不把它做成inline，编译器没有能力把它做成inline。"),s("br"),t._v("\n这个分界点在哪呢？简单的这样想：如果你的函数太复杂了，就没有办法inline，这对我们写程序的人来说，这有点讨厌。。干脆我们全部让他inline就好了。『可以！！』")],1),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),s("p",[t._v("在1个本体当中，很重要的可以区分为某几大段。用什么样的关键字来区分呢？private和public")]),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),t._m(85),t._v(" "),t._m(86),t._m(87),t._v(" "),s("p",[t._v("构造函数里面要做的事情：\n1、设置到实部和虚部：可能在大括号里面写，这样OK，但是咋们要弄一个大气，好的写法是：不要这么写。\n我们应该要利用『构造函数』的1种很特别的语法，『只有构造函数才有』。其他函数是没有的——初始列\n关于这1行写在哪里，无所谓，随便你还不换行，因为C和C++都是『1种free format『不是这个单词》，，自由形式的写法』，随便你在哪断行。\n初始化，这种写法，我会看你是不是充分使用。而不是省略的放在{}里面，最后结果是1样的，但是表示你没有受过良好训练")]),t._v(" "),s("p",[t._v("PS『注意』：")]),t._v(" "),t._m(88),t._v(" "),t._m(89),t._v(" "),s("ul",[s("li",[t._v("此外：与构造函数对应的，有个析构函数，语法也蛮特别的。但是在我们这个例子里面，不需要写析构函数！")]),t._v(" "),s("li",[t._v("原因：前面我们提到过，class有1个经典的分类，1种带指针，1种不带指针。")]),t._v(" "),s("li",[s("font",{staticStyle:{background:"yellow"}},[t._v("这种就是不带指针的class，"),s("strong",[t._v("多半是不用写析构函数的")]),t._v("，『也不能说全部哈！（笔者的想法是，比如需要某析构函数来输出提示文字帮助阅读）")]),t._v("』")],1)]),t._v(" "),t._m(90),t._v(" "),t._m(91),t._v(" "),s("p",[t._v("现实生活中常常会这样吗？  常常会，比如你现在设计1个类，等待外界要来创建1个对象。创建对象的时候，要怎么创建，你可能有很多想法，比如你可能有3种想法：那你就写出3个构造函数。")]),t._v(" "),t._m(92),t._v(" "),t._m(93),t._v(" "),t._m(94),s("ul",[s("li",[t._v("『注意点：』"),s("font",{staticStyle:{background:"yellow"}},[t._v("『易错』画黄色底色的，这种写法是不行的！")])],1),t._v(" "),s("li",[t._v("看起来语言上是可以的，但是实际上是不行的！")]),t._v(" "),t._m(95)]),t._v(" "),t._m(96),t._v(" "),t._m(97),t._v(" "),t._m(98),t._v(" "),t._m(99),t._v(" "),t._m(100),t._v(" "),t._m(101),t._v(" "),t._m(102),t._v(" "),t._m(103),t._v(" "),s("p",[t._v("外界不能创建它。。。那么外界需要它的话，那么怎么办呢？？？")]),t._v(" "),s("p",[s("font",{staticStyle:{background:"yellow"}},[t._v("我们观察到：我们是借助static成员函数突破class的访问级别，被全局访问，然后借助这个static成员函数，去访问private的构造函数，『神奇的思路』。。。")])],1),t._v(" "),s("p",[t._v("Singleton，你可能查字典查不到这个字。你可能查字典，查到Single。")]),t._v(" "),t._m(104),t._v(" "),t._m(105),t._v(" "),s("p",[t._v("『这里出现了目前没有学的语法，重点只是告诉大家确实有这样一种需求，把构造函数放在private中去』")]),t._v(" "),t._m(106),t._v(" "),t._m(107),t._v(" "),t._m(108),t._v(" "),t._m(109),t._v(" "),s("p",[t._v("大家想一想，")]),t._v(" "),t._m(110),t._v(" "),s("ul",[s("li",[t._v("注意：const要加的话，就一定要加！！！『三遍的重要』")]),t._v(" "),s("li",[t._v("不加的话，会有什么样的"),s("font",{staticStyle:{background:"yellow"}},[t._v("后果？？")])],1),t._v(" "),s("li",[t._v("注意右边：")]),t._v(" "),t._m(111),t._v(" "),s("li",[t._v("检讨：万一没加，而使用者会这么用，会产生什么后果，使用者的第一行的意思：我这个值是不可以改变的哦，我这个复数里面的2和1都是不可以改变的。，，然后，我要取得实数部分，逻辑上可以，，但是如果忘记写了const，那这个函数的意思就是说：我这个函数可以会改变Data，使用者说，绝对不可以该，这个函数却告诉我说，我可能会改变。")]),t._v(" "),s("li",[t._v("这是矛盾的，所以，编译器编译到这个的时候，就说不行！！你这个调用不行，如果你没有写const的话，它会说不行！『这样，使用者是不是会愕然，大吃一惊，我有个实部，为什么我不能够打印它的数据呢』那就表示你这个复数class设计不好！！！复数是谁设计的？？不就是我们嘛。。我们设计不好，就是因为该加const就没有加")])]),t._v(" "),s("p",[t._v("『很多很多人忽略这个很重要的事情』")]),t._v(" "),t._m(112),t._v(" "),t._m(113),t._v(" "),s("ul",[t._m(114),t._v(" "),t._m(115),t._v(" "),t._m(116),t._v(" "),t._m(117),t._v(" "),t._m(118),t._v(" "),t._m(119),t._v(" "),t._m(120),t._v(" "),t._m(121),t._v(" "),t._m(122),t._v(" "),t._m(123),t._v(" "),t._m(124),t._v(" "),t._m(125),t._v(" "),s("li",[s("p",[t._v("『所以，现在建立一个"),s("font",{staticStyle:{background:"yellow"}},[t._v("良好的习惯")]),t._v("——『你最好，所有的参数传递，你都传递引用』，，尽量不要传递值』")],1)])]),t._v(" "),s("p",[t._v("这个时候，可能有人检讨了：如果传递的是一个char呢》》如果你传引用的话，那不是更大？？那我还不如单单传char，，这个讨论是很细节的。这个说法是对的！！你愿意想得这么细也可以。『但是如果给你个大范围的遵循守则的话，我愿意说大家，不管什么都传递引用』")]),t._v(" "),t._m(126),t._v(" "),t._m(127),t._v(" "),t._m(128),t._v(" "),t._m(129),t._v(" "),t._m(130),t._v(" "),t._m(131),t._v(" "),t._m(132),t._v(" "),s("p",[t._v("『但是，在在这个人语言里头说，朋友可以来拿『数据』』")]),t._v(" "),s("p",[t._v("private的数据，不想让外界任何人去取得我的。我们要的就是这种封装，但是对于特别的一种人，我网开一面，我是设计class的人。")]),t._v(" "),t._m(133),t._v(" "),t._m(134),t._v(" "),t._m(135),t._v(" "),t._m(136),t._v(" "),t._m(137),t._v(" "),t._m(138),t._v(" "),t._m(139),t._v(" "),t._m(140),t._v(" "),t._m(141),t._v(" "),t._m(142),t._v(" "),s("p",[t._v("首先考虑引用→用引用可不可以呢？→决定")]),t._v(" "),t._m(143),t._v(" "),t._m(144),t._v(" "),t._m(145),t._v(" "),s("p",[t._v("C语言中，如果你要对一个东西进行操作，一定是设计一个函数。事实上，在C++里面，操作符就是一种函数。是可以让你重新定义的！！这是它很大的一个特点。")]),t._v(" "),t._m(146),t._v(" "),t._m(147),t._v(" "),t._m(148),t._v(" "),t._m(149),t._v(" "),t._m(150),t._v(" "),t._m(151),t._v(" "),t._m(152),t._v(" "),t._m(153),t._v(" "),t._m(154),t._v(" "),t._m(155),t._v(" "),t._m(156),t._v(" "),t._m(157),t._m(158),t._v(" "),t._m(159),t._v(" "),t._m(160),t._v(" "),t._m(161),t._v(" "),t._m(162),t._v(" "),t._m(163),t._v(" "),t._m(164),t._v(" "),t._m(165),t._v(" "),t._m(166),t._v(" "),t._m(167),t._v(" "),t._m(168),t._v(" "),t._m(169),t._v(" "),t._m(170),t._v(" "),t._m(171),t._v(" "),t._m(172),t._m(173),t._v(" "),t._m(174),t._v(" "),t._m(175),t._v(" "),t._m(176),t._v(" "),t._m(177),t._v(" "),t._m(178),t._v(" "),t._m(179),t._v(" "),t._m(180),t._v(" "),t._m(181),t._v(" "),t._m(182),t._m(183),t._v(" "),t._m(184),t._v(" "),t._m(185),t._v(" "),t._m(186),t._v(" "),t._m(187),t._v(" "),t._m(188),t._v(" "),t._m(189),t._v(" "),t._m(190),t._v(" "),t._m(191),t._v(" "),t._m(192),t._v(" "),t._m(193),t._v(" "),t._m(194),t._v(" "),t._m(195),t._v(" "),t._m(196),t._v(" "),t._m(197),t._v(" "),t._m(198),t._v(" "),t._m(199),t._v(" "),s("ul",[s("li",[s("font",{staticStyle:{background:"yellow"}},[t._v("可能，本来就有东西！！！")])],1),t._v(" "),s("li",[t._v("拷贝赋值，这个概念。好，现在先听我这边讲，我要把这一边的东西复制到我的把我的右手先跟你看起来刚好相反哈，我的右手是你的左边，我要把一。\n右边的东西赋值或者叫拷贝到左边身上来，我该怎么办呢？\n1、这左右本来就都已经有东西了！！『核心，最容易被忽略的地方！！！』\n2、我应该先把左边杀掉，清空，然后创建出跟右边一样大的空间，再把右边复制到我的左边身上。\n3、我再讲一次，这两个本来就都有东西，我要先把这一个的原来东西清空，然后分配一块跟这边一样大的空间，然后把这边拷贝到这里来，这是很容易理解的。\n4、那这就是这三个动作，先delete掉自己，因为这个赋值操作哈用法是这样，各位看到这样子。")])]),t._v(" "),t._m(200),t._v(" "),t._m(201),t._v(" "),t._m(202),t._v(" "),s("ul",[t._m(203),t._v(" "),t._m(204),t._v(" "),t._m(205),t._v(" "),t._m(206),t._v(" "),s("li",[s("p",[t._v("你看是这样，他一开始左跟右就是指同一个，事实上就只有一个了，我把它画成左边跟右边啊，世上就只有一个。\n那赋值动作的第一件事情是杀掉，还记得吗？\n我们再回头看一看，一、二、三里面的第一个动作就是杀！！！\n假设你没有写上面这一块啊，我们正在讨论要不要写上面这一块，你没有。！！！\n嗯好，"),s("font",{staticStyle:{background:"yellow"}},[t._v("那你就接下来就杀掉你看第一个动作就把『唯一』的这个杀掉了。！！！神乎其技的一个坑。。。")]),t._v("\n那下一个动作呢再回到刚刚这边来，第二个动作是要去看右边那个的长度。\n已经不行了呀，已经不见了。")],1)])]),t._v(" "),t._m(207),t._v(" "),t._m(208),t._v(" "),t._m(209),t._v(" "),t._m(210),t._v(" "),t._m(211),t._v(" "),t._m(212),t._v(" "),t._m(213),t._v(" "),t._m(214),t._v(" "),t._m(215),t._v(" "),t._m(216),t._v(" "),t._m(217),t._v(" "),t._m(218),t._v(" "),t._m(219),t._v(" "),t._m(220),t._v(" "),t._m(221),t._v(" "),t._m(222),t._v(" "),t._m(223),t._v(" "),t._m(224),t._v(" "),t._m(225),t._v(" "),t._m(226),t._v(" "),t._m(227),t._v(" "),t._m(228),t._v(" "),t._m(229),t._v(" "),t._m(230),t._v(" "),t._m(231),t._v(" "),t._m(232),t._v(" "),t._m(233),t._v(" "),t._m(234),t._v(" "),t._m(235),t._v(" "),t._m(236),t._v(" "),t._m(237),t._v(" "),t._m(238),t._v(" "),t._m(239),t._v(" "),t._m(240),t._v(" "),t._m(241),t._v(" "),t._m(242),t._v(" "),t._m(243),t._v(" "),t._m(244),t._v(" "),s("p",[t._v("其实delete 会被拆为两个动作，刚刚已经提过了。\n两个动作里面的第二个动作会把这一块删掉。\n啊，这一块删掉，这一块删掉必须cookie")]),t._v(" "),t._m(245),t._v(" "),t._m(246),t._v(" "),t._m(247),t._v(" "),t._m(248),t._v(" "),t._m(249),t._v(" "),t._m(250),t._v(" "),t._m(251),t._v(" "),t._m(252),t._v(" "),t._m(253),t._v(" "),t._m(254),t._v(" "),t._m(255),t._v(" "),t._m(256),s("p",[t._v("​")]),t._v(" "),t._m(257),t._v(" "),t._m(258),t._v(" "),t._m(259),t._v(" "),s("ul",[s("li",[t._v("我们现在谈论的是基于对象的程序设计，也就是写单一的class。")]),t._v(" "),s("li",[t._v("static是什么呢？我们可以这个小主题，好好来熟悉一下"),s("code",[t._v("this-pointer")]),t._v(" "),s("ul",[s("li",[t._v("『当你的程序在很多的class之间走来走去，你要对这个this指针有充分的了解，才能够做到这一点』")]),t._v(" "),s("li",[t._v("『"),s("font",{staticStyle:{background:"yellow"}},[t._v("黄色的this你可写，可以不写，如果不写，编译器会给你加上那一行")]),t._v("』")],1)])])]),t._v(" "),t._m(260),t._v(" "),t._m(261),t._v(" "),t._m(262),t._m(263),t._v(" "),t._m(264),t._v(" "),t._m(265),t._m(266),t._v(" "),t._m(267),t._v(" "),t._m(268),t._v(" "),t._m(269),t._v(" "),t._m(270),t._v(" "),t._m(271),t._v(" "),t._m(272),t._v(" "),t._m(273),t._v(" "),t._m(274),t._v(" "),t._m(275),t._v(" "),t._m(276),t._v(" "),t._m(277),t._v(" "),t._m(278),t._v(" "),t._m(279),t._v(" "),t._m(280),t._v(" "),t._m(281),t._v(" "),t._m(282),t._v(" "),s("ul",[s("li",[s("font",{staticStyle:{background:"yellow"}},[t._v("实参推导argument deduction. 这个是和类模板，很大差别的地方。")]),t._v("\n我们在网上看一次类模板的用法。用的时候必须明确指出来，里头那个type要绑定，为什么")],1)]),t._v(" "),t._m(283),t._m(284),t._v(" "),t._m(285),s("p",[t._v("不必指出来为什么呢？\n因为编译器会做argument deduction 实参的推导。\n啊，这个非常好，他就把我们推出来说OK\n既然这个r1和r2都是stome\n所以他就跑到右边来把所有的t 替换为stone得到了一个函数的版本。")]),t._v(" "),s("p",[t._v("那那继续编译下去呢，编译去看，唉，这个T是stone，所以a 跟b 要比大小就是stone要比大小。\nstone怎么比大小？嗯，编译器不知道。\n那怎么办呢？\n操作符重载\n编译器去看这个小于这个符号是作用在b身上，而b，b 是一种T\nt是什么呢？现在说要比的是stone")]),t._v(" "),s("p",[t._v("于是编译器就去找这个stone，看你有没有定义operator <这个函数。")]),t._v(" "),t._m(286),t._v(" "),s("p",[t._v("标准库里面有一大堆这种东西，七八十个。\n就把这一种东西叫做algorithm算法")]),t._v(" "),t._m(287),t._v(" "),s("ul",[s("li",[s("p",[t._v("参考"),s("a",{attrs:{href:"https://blog.csdn.net/RAM_MAM/article/details/76910483",target:"_blank",rel:"noopener noreferrer"}},[t._v("链接"),s("OutboundLink")],1)])]),t._v(" "),t._m(288),t._v(" "),t._m(289)]),t._v(" "),t._m(290),t._v(" "),t._m(291),t._v(" "),t._m(292),t._v(" "),t._m(293),t._v(" "),t._m(294),t._v(" "),t._m(295),t._v(" "),t._m(296),t._v(" "),t._m(297),t._v(" "),t._m(298),t._v(" "),t._m(299),t._v(" "),t._m(300),t._v(" "),t._m(301),t._v(" "),t._m(302),t._v(" "),t._m(303),t._v(" "),t._m(304),t._v(" "),s("p",[t._v("『设计模式』")]),t._v(" "),s("p",[t._v("这个是我刚刚所说的，换了一个面貌出现。而说不定这个deque有一百个功能。\n但是被包进来以后只开放了六个功能，我用开放这个字眼来形容，只开放了这六个，而且名字也可能换了。\n在存在这种情况的话，这就表现出一个设计模式叫Adapter。什么叫adapter 呢？变压器就是一种代表。")]),t._v(" "),s("p",[t._v("改造/适配/配接都叫adapter，所以用在这个地方就是这个东西已经很棒了，你手上已经有这个东西了，现在客户想要另外一个东西。\n但是你手上的这个东西功能其实完全满足，只是名称也许不一样，接口也许不一样。\n那我们就说：那我们来写一个adapter 不就好了，把它改造一下一下而已啊，只是把名字换一下。")]),t._v(" "),t._m(305),t._v(" "),t._m(306),t._v(" "),t._m(307),t._v(" "),t._m(308),t._v(" "),t._m(309),t._v(" "),t._m(310),t._v(" "),t._m(311),t._v(" "),t._m(312),t._v(" "),s("p",[t._v("析构")]),t._v(" "),s("p",[t._v("虚构的次序就要刚好相反，就由外而内。你有一个东西，他有三层，你要吸构它的时候，当然是外面那一层剥掉在玻璃面。\n快播。更里面，你不能直接把最里面的抽掉，一抽掉，整个塔塔下塌陷。\n可以理解啊，这在人类的这个这个生活习惯上也是这样。")]),t._v(" "),t._m(313),t._v(" "),t._m(314),t._v(" "),s("p",[t._v("这边提到默认构造函数，为什么？\n呃，析构函数没有所谓默认啊，但是构造函数这边提到默认为什么呢？『因为红色的是编译器加的』\n他要帮我们去调用内部的这一个吸构函数，他怎么知道要怎么调用呢？\n也许内部这个吸构函数有两个，三个四个、五个编译器。不知道要帮你调哪一个。\n所以他唯一能够做的说，『那我的行为是帮你调用默认了这一个』。\n如果这个不符合你意的话。")]),t._v(" "),s("p",[t._v("你就要自己这么写，你要在自己这个外部的构造函数里面，在这个位置上写，我要调用内部的构造函数。\n对啊，什么参数你就要自己写。")]),t._v(" "),t._m(315),t._v(" "),t._m(316),t._v(" "),t._m(317),t._v(" "),t._m(318),t._v(" "),t._m(319),t._v(" "),t._m(320),t._v(" "),s("p",[t._v("『它的另外一个名称叫作：Handle和Body，左边是Handle，右边是Body』")]),t._v(" "),s("p",[t._v("在外界看到的字符串看到的是左边的这一个。")]),t._v(" "),t._m(321),t._v(" "),t._m(322),t._v(" "),t._m(323),t._v(" "),t._m(324),t._v(" "),t._m(325),t._v(" "),t._m(326),t._v(" "),t._m(327),t._v(" "),s("p",[t._v("我们的习惯用这种空心三角形来表现，呃，画法是要从子类下面，这个是儿子，上面是父亲嘛，从子类往父类，这画画一个空心三角形。")]),t._v(" "),t._m(328),t._v(" "),t._m(329),t._v(" "),s("p",[t._v("如果你用public 继承，你去写两个class 的关系是如此，但他其实不是将来在某一个时间点可能会出错。\n也许不会出错，这要看有没有touch到那个特殊的情况。")]),t._v(" "),t._m(330),t._v(" "),t._m(331),t._v(" "),t._m(332),t._v(" "),t._m(333),t._v(" "),t._m(334),t._v(" "),t._m(335),t._v(" "),t._m(336),t._v(" "),t._m(337),t._v(" "),t._m(338),t._v(" "),s("p",[t._v("这个地方利用继承。目的只是为了。继承的关系：子类里头会有，父类里面是会有父类的一个part。")]),t._v(" "),t._m(339),t._v(" "),t._m(340),t._v(" "),t._m(341),t._v(" "),t._m(342),t._v(" "),t._m(343),t._v(" "),t._m(344),t._v(" "),t._m(345),t._v(" "),s("p",[t._v("我把它设置为纯虚函数，意思是什么呢？\n这个函数一定要被所有的子类重新定义，必须定义。因为什么？因为我现在作为父类，我根本不知道怎么去定义它。")]),t._v(" "),s("p",[t._v("我们一个类里头。考虑到继承这件事情，\n我作为父类，我的成员函数有三种选择，要怎么去思考呢？就是刚刚我所说的这一段。")]),t._v(" "),t._m(346),t._v(" "),s("p",[t._v("好，所以继承这个关系，最终呢要的是搭配虚函数。\n现在我来举一个非常经典的例子。\n我使用powerpointle『PPT』。我举一个例子啊，我使用的是powerpoint。\n当我要开启一个文件的时候，open file\n我把这个菜单打开来选下去。\n我现在是使用者。这边会跑出一个对话框。『右边』\n里头可以条列出来，让我选择。\n或者是我在下面这里打入file name文件名称。")]),t._v(" "),s("p",[t._v("按下ok 之后，程序应该收到一个file name，他应该去检查发file name正不正确，有没有一些不可以有的字符。\n然后他应该到硬盘里面去找这个file在不在。找到了之后把它open 打开来，打开之后把它读出来。\n因为我这里要叫开启旧文件，所以应该把它读出来。")]),t._v(" "),t._m(347),t._v(" "),t._m(348),t._v(" "),s("p",[t._v("从刚刚左边的1二三四五六七这些动作。其实是任何人来写这段代码，写出来都差不多。表现出来的形式也差不多。\n那何不有人先把它写好呢？能不能够有人先把它写好，让后面的人来用。\n这些步骤理念只有最后这个步骤：就是开启文件之后的读物的内容。没办法事先写。\n啊，因为我可能写一个简报软件，你写一个文书软件呃，他写一个试算表软件，我们最后要读出来要读的东西不一样。所以这件事情没有办法事先写好，\n除此之外所有的都可以先写。")]),t._v(" "),t._m(349),t._v(" "),s("p",[t._v("好，大家开始写了。这就是CDocument里面的OnFileOpen\n他就把刚刚的一二三四五六七的动作全部写好。甚至于包括开文件，open file.\n这个在整个在看你在哪一个平台底下，比如说你在windows 底下，你要开启一个文件，动作都是一样的。\n这个写好之后呢，但是有一个动作他写不出来。\n就是这个读的那个读内容的这个动作。\n所以根据刚刚的说法啊，一个父类。有一些函数呢。没有办法先写出来。要让子类去写他。这一种我们就必须把它设计为virtual function方式。")]),t._v(" "),t._m(350),t._v(" "),s("p",[t._v("我先创建一个子类的对象在这里。我通过子类对象调用父类的函数。\n注意我这句话。在面向对象编程面向对象语言里面，这是一个非常常出现的动作。\n通过子类的对象调用父类的函数。子类可以调用父类的函数啊，所以这个是没有问题的。\n于是这一条我就用这一条灰色的粗线引导大家这一个动作呢，那调用的是谁呀？\n这一个函数的全名叫什么？我子类并没有写这个函数哦。\n但是我可以调用它。就这个函数的全名叫这样子。")]),t._v(" "),s("p",[t._v("跑到我们写的这个函数来执行完毕之后再跑回去。然后才回到调用端。\n完美。这正是我们所要的行为。这就是虚函数最重要的一种用途。")]),t._v(" "),t._m(351),t._v(" "),s("p",[t._v("这个做法是如此的经典，以至于有一个。『专属的名称。』\n这一个函数它里头做了一些固定的动作。把其中的一个关键部分的延缓到子类去决定。\n什么叫做延缓？你看这个，这个Serialize就是关键动作。\n在父类是写不出来的，是一个斜体的表示抽象。延缓可能是一年以后，三年以后有子类把它写出来。\n我们就把这一个函数。叫做，或者说这个函数的做法叫做template Method\n大名鼎鼎的23个设计模式之一template Method。\n不要误会template，C++也有template\n但是这里不是C++的那个模板啊，这里是套用这个概念！！概念")]),t._v(" "),t._m(352),t._v(" "),t._m(353),t._v(" "),s("p",[t._v("有这么一种产品。最有名的在十多年前横扫全世界的一个产品叫MFC（ microsoft foundation classes）\n就是这种产品。他所做的事情就是我刚刚所说的。")]),t._v(" "),s("p",[t._v("虚函数的一个最经典最重要的一个用法。\n你可能会很好奇，为什么这边走到这里来之后。他会跑到这个位置来。\n我这边有一点补充，也许可以帮助你，但是这里面有很深奥的东西。\n没有办法讲的非常的全面。")]),t._v(" "),s("p",[t._v("我们看这一行。『刚刚已经为你分析过这一行调用动作，他的全名是这样。』\n而谁调用我那个谁就会变成this pointer\n所以如果我们扮演编译器的角色，我们把它写成这样子，这个MyDoc，这就是调用者他的地址就被放进来，变成一个隐藏的参数。\n这个就是this。好，这一个函数，那就是这个函数呢。\n这个函数就是这个函数，所以这个this pointer 就被传进来了，传到这里面来了。隐藏了，所以这边没写出来。\n而这一个函数理念在调用函数其他函数像现在这样调用Serilazie 的时候，其实编译器是看成这样子。是通过类似来调用。")]),t._v(" "),t._m(354),t._v(" "),s("p",[t._v("我们用这一页很经典的例子来引导大家去了解继承搭配虚函数的最重要的用途。")]),t._v(" "),t._m(355),t._v(" "),t._m(356),t._v(" "),t._m(357),t._v(" "),t._m(358),t._v(" "),t._m(359),t._v(" "),s("p",[t._v("我们继续下去。\n现在有继承，前面有讲过复合composition，也讲过delegation 委托。\n如果出现这种情况的话。又有继承，又有复合。在这种关系之下，构造跟析构会是一个什么情况呢？")]),t._v(" "),s("p",[t._v("我们看看这张图。\n这个就是父类和子类，而此类里头又有一个component。\n从内存的角度去画。我们可以说。此类里头有父类的part 成分。又有component 在里头。")]),t._v(" "),t._m(360),t._v(" "),s("p",[t._v("不过对于我们主要是让我们能够深刻理解。那个内存的那个Layout布局。\n我这里没有给你答案。我希望把这个留作你的习题。\n你该怎么办？你就像这张图这样。写出三个类，建立起他们这一种关系，一个是继承的关系，一个是composition 复合的关系。\n然后你在这三个类里头的构造函数，你都用cout打印出。打印出一个消息出来，你就可以观察谁先谁后。\n啊，这个问号呢希望你自己来完成！！！")]),t._v(" "),t._m(361),t._v(" "),t._m(362),t._v(" "),t._m(363),t._v(" "),t._m(364),t._v(" "),t._m(365),t._v(" "),t._m(366),t._v(" "),t._m(367),t._v(" "),s("p",[t._v("比如这个例子。先给大家看一段这个在解决什么问题。我们看这一页。\n啊，不晓得你有没有用过呃，powerpoint 或者word 的这种功能。我想所有的office 软件都提供这种功能。\n你可以开一个呃。一个文件。并且在这个窗口这个地方，现在都是很小，在窗口这个地方呢。拉下来说，我要呃，\n我现在忘记他的，他给我们的命令叫什么名字，应该是开一个新窗口吧啊那我就开了4个。\n其实我这样的动作是什么呢？文件只有1份，窗口有4个。所以我等于是用4个放大镜或4个窗户在看同一个东西。\n所有的office 软件都提供这种功能。不过呃，表现不太一样，像word 我就不太喜欢用啊。\nword他开出来是没有办法像这样子排列，使得我在操作上。比如说我在写作，我在准备讲义的时候呢，就不方便使用。\n但是在powerpoint这样子很棒的。或者是像这种情况。『指着右下角』\n我有一份数据。就是一个document。我有三种不同的view，不是三个view，我是三种view")]),t._v(" "),s("p",[t._v("再看他。要表现出这一种行为出来。就必须表现文件的这一种class。\n还有呈现文献，一个是一个是储存数据，一个是表现数据。这两个class。之间要具备怎么样的关联性呢才能够表达这种状态呢？\n这是什么状态？如果这里有变化，其他都要跟着变化哦。因为真正的Data只有一份。\n这是什么状态？如果数据有变化，这些条状图，这些饼状图都要跟着变化。这样才对。")]),t._v(" "),t._m(368),t._v(" "),s("p",[t._v("左跟右，我们让左边可以拥有很多个右边，因为使用者可以开出很多很多的observer 观察者。\n所以我应应该怎么准备数据呢？在左手边这里，我们准备一个容器，现在选择的是向量C++容器\n里头尖括号里头说我要放什么东西呢？我要放指针去指向右边这种东西。\n这样就确定下来了，这是什么？这个就是带来可以选指针嘛。\n而指向右边。我们前面有一个例子说左边是字符串，右边是字符串的实现。\n当时我说那个用途不是非常大，因为左跟右是一对一，也不能变了，不能变化。\n现在呢右边这一个可以被继承。\n这个标题上的，委托加上inheritance ，这个继承在这里。\n所以这只是一个父类将来派生下去有观察。\n比如说按照1秒钟观察一次或者是什么情况，观察1次的。\n这些下面这些子类全部都is-a，都是一种observer。\n那既然都是一种呃，不知道吧，下面这些东西通通创建出来之后，都可以放到这个容器里头。\n也就是说，『这有三种不同的人或三个相同的人在看这一份数据。』\n回到上面，我们这个像这样就是相同的observer 有四个。\n像这样就是不同的observer 有三个。\n好，这样的话。就可以实现刚刚画面上所呈现的那一种结果。")]),t._v(" "),t._m(369),t._v(" "),t._m(370),t._v(" "),t._m(371),t._v(" "),s("p",[t._v("那我刚刚提到。到了有一些问题以及一些解法呢出现了有adapt这个关这个名称，有呃kindle body或者叫做policy in promotion这个名称。\n我们有看到了呃technology、message这个名称，这都是代表一种问题以及一种解法。")]),t._v(" "),t._m(372),t._v(" "),t._m(373),t._v(" "),t._m(374),t._v(" "),s("p",[t._v("也许你会想说，我可能还是个初学者，我才刚开始从单一的class开始学习起，突然就把我带到了设计模式。\n这这个会不会太快、太可怕，你觉得会吗？")]),t._v(" "),t._m(375),t._v(" "),t._m(376),t._v(" "),t._m(377),t._v(" "),t._m(378),t._v(" "),t._m(379),t._v(" "),t._m(380),t._v(" "),t._m(381),t._v(" "),t._m(382),t._v(" "),t._m(383),t._v(" "),t._m(384),t._v(" "),t._m(385)])}),[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"c-面向对象高级编程（上）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-面向对象高级编程（上）"}},[this._v("#")]),this._v(" C++面向对象高级编程（上）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("C++98")]),this._v(" "),e("li",[this._v("Object Oriented Progrmming, OOP")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<font style="background:yellow">\n')])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"📑目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#📑目录"}},[this._v("#")]),this._v(" 📑目录")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("01.C++编程简介\n02.头文件与类的声明\n\t- 防卫式的声明『Good』\n\t- 区分：基于对象的设计+面向对象的设计\n03.构造函数\n04.参数传递与返回值  \n05.操作符重载与『临时对象』\n06.复习Complex类的实现过程『class中不带指针的设计』\n07.3大函数：拷贝构造，拷贝复制，析构『Big Three』\n08.堆，栈与内存管理\n\t- 区分：Stack对象和heap对象\n09.复习String类的实现过程『class中带指针/引用的设计』\n10.扩展补充：类模板，函数模板，及其他\n11.组合与继承\n12.虚函数与多态\n13.委托相关设计\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"⭐️中英对照"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#⭐️中英对照"}},[this._v("#")]),this._v(" ⭐️中英对照")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("区分：\n"),e("ul",[e("li",[e("strong",[this._v("Object Based")]),this._v("『基于对象的设计』")]),this._v(" "),e("li",[e("strong",[this._v("Object Oriented")]),this._v(" 『面向对象的设计』")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("li",[t._v("区分：\n"),s("ul",[s("li",[t._v("class without pointer members『class中不带指针/"),s("strong",[t._v("引用")]),t._v("的设计』")]),t._v(" "),s("li",[t._v("class with pointer members『注意，我们讨论的却是：class中带指针/"),s("strong",[t._v("引用")]),t._v("的设计』")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("li",[t._v("Big Three『记忆』\n"),s("ul",[s("li",[t._v("copy ctor，拷贝构造函数\n"),s("ul",[s("li",[t._v("default copy ctor，默认的拷贝构造函数")]),t._v(" "),s("li",[t._v("非默认的")])])]),t._v(" "),s("li",[t._v("copy assignment operator，拷贝赋值函数『copy op=』（注意：不要翻译成，拷贝复制函数。。。）\n"),s("ul",[s("li",[t._v("default copy op=")]),t._v(" "),s("li",[t._v("非默认的")])])]),t._v(" "),s("li",[t._v("dtor，析构函数")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("重载"),e("code",[this._v("<<")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_01-c-编程简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_01-c-编程简介"}},[this._v("#")]),this._v(" 01.C++编程简介")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("面向对象是1个"),e("strong",[this._v("观念")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-1-应该具备的基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-应该具备的基础"}},[this._v("#")]),this._v(" 1.1.应该具备的基础")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710140800201.png",alt:"image-20210710140800201"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("•作用域 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t『比如说，"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("里面的变数在里头的生命』\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-2-我们的目标✅"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-我们的目标✅"}},[this._v("#")]),this._v(" 1.2.我们的目标✅")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710140924654.png",alt:"image-20210710140924654"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("培养正规的、大气的編程習慣『"),e("strong",[this._v("即使是小的程序，我们也希望，一出手就是有大家规范的正规的写法")]),this._v("』")])]),this._v(" "),e("li",[e("p",[this._v("要引导大家以良好的习惯来写C++的class，因为C++代码中最重要的每一个单元都是1个class")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("class有2个很经典的分类：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("又有一个名字："),e("strong",[this._v("Object Based")]),this._v(" (基於對象)基于对象")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("• 以良好的方式编写\t \n    C++ class『为什么写class呢？因为C++代码里面，每一个单元，最重要的一个单元就是一个class』\n    class有下面2个很经典的分类：带不带pointer『这2种在设计上、思考上截然不同』？？或许是拷贝？\n    \n• class without pointer members\n— Complex\n    \n• class with pointer members\n— String\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("又叫：Object Oriented (面向對象）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[e("strong",[this._v("你将获得的代码")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("complex.h\ncomplex-test.cpp\n\nstring.h\nstring-test.cpp\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br"),e("span",{staticClass:"line-number"},[this._v("3")]),e("br"),e("span",{staticClass:"line-number"},[this._v("4")]),e("br"),e("span",{staticClass:"line-number"},[this._v("5")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-3-c-演化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-c-演化"}},[this._v("#")]),this._v(" 1.3.C++演化")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710141535846.png",alt:"image-20210710141535846"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("C++ 語言 (1983) 就有了")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("• C"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("『语言真正正规化。是"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1998")]),t._v("年』\n    \n• C"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("03")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TR1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Technical Report "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n• C"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("『过了"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v("年才有"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.0")]),t._v("，中间有一些小的版本』\n• C"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v("『"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2014")]),t._v("年又有一个小版本』\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("本课程讲解：目前大部分在业界，大部分的程序员所使用的，其实大家不必太在乎版本。")]),this._v(" "),e("p",[this._v("大部分所用的几乎都是C++98，2011的这个版本出现了很多新的关键字、新的概念、在标准库上也出现了很多新的工具、东西来用。也许太新了『本课程现在才2015年』，所以使用这个新特性的人并不是太多。")]),this._v(" "),e("p",[this._v("所以，本课程讲解的都是C++最基础的东西，C++98就有了")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710141746354.png",alt:"image-20210710141746354"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-4-学习c-是学什么？『2部分』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-学习c-是学什么？『2部分』"}},[this._v("#")]),this._v(" 1.4.学习C++是学什么？『2部分』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("C++语言")]),this._v(" "),e("li",[this._v("C++标准库")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("我要传达的概念是：现在语言越来越复杂，所以他们的标准库给大家的东西也是『越来越多』，那使用这些标准库，也是一些非常重要的一些事情。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("我们这门课：我们主要谈论语言，我们用到『标准库』，只有一些最简单的一些东西的输出。实际上，标准库是非常庞大，非常有用的。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("可以说：如果你是C++程序员，如果你不怎么去用标准库的话，你不能算是一个合格的、好的程序员、有生产力的。")]),this._v(" "),e("li",[this._v("当你发现：在学生时代/进入业界，开始大量的写你们的大型的语言的，你就会知道标准库的重要性。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-5-书籍推荐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-书籍推荐"}},[this._v("#")]),this._v(" 1.5.书籍推荐")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210711162749553.png",alt:"image-20210711162749553"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("课程开始前，介绍经典书籍")]),this._v(" "),e("li",[this._v("语言部分，上面是卖得最好、读者最多的百科型全书C++")]),this._v(" "),e("li",[this._v("经常，我们学1个东西，我们都要学习一下某某之父写的东西『就是右边这本』")]),this._v(" "),e("li",[this._v("『左边的书，是C++第1个编译器的作者写的书籍』，所以也有相当的说服力。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712204753316.png",alt:"image-20210712204753316"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("学了语言之后，其实很希望得到专家的建议。在这个里面呢，我也扮演这种角色，告诉你什么东西该写，什么东西怎么样写比较好。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712204818794.png",alt:"image-20210712204818794"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("刚刚，我们说完『语言』，语法和语义")]),t._v(" "),s("li",[t._v("我们现在说『标准库』， 我也看过很多这方面的书，很推荐左边这一本。")]),t._v(" "),s("li",[t._v("当然，深入下去，想看一下源代码，这种书就很少。右边，源代码解析")]),t._v(" "),s("li",[t._v("这条路很遥远了，不解释太多")]),t._v(" "),s("li",[s("strong",[t._v("STL其实就是标准库的前身")]),t._v("。可以想象标准库中，70-80%以前叫作STL『简单这样理解』")]),t._v(" "),s("li",[t._v("只讲了这么点：肯定有遗珠之憾。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_02-头文件与类的声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_02-头文件与类的声明"}},[this._v("#")]),this._v(" 02.头文件与类的声明")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("『现在，咋们"),e("strong",[this._v("正式进入“语言”的部分")]),this._v("』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710142207614.png",alt:"image-20210710142207614"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("首先拿C和C++在『函数』和『数据』上角色的不同，进行比较。")]),t._v(" "),s("li",[t._v("C语言中那样设计：数据和函数，这样的缺点：由于语言没有提供足够的关键字，所以这些数据一定是全局的，所以大家『所谓大家就是各个函数』都可以去处理它们，这样它们对后面会有影响的，甚至是很大的影响。所以发展出面向对象语言C++")]),t._v(" "),s("li",[t._v("C++是第1个最有名的面向对象语言，想法是什么呢？就是把数据还有处理这些数据的函数包在一起。你的数据只有这个函数才能去处理它。其他人看不到。这样不会混杂在一起，")]),t._v(" "),s("li",[t._v("其实class也就是C中的struct结构。只不过，**C++使用了更多的特性在里面，使用了『更多的关键字』**让我们去使用这些特性。")]),t._v(" "),s("li",[t._v("C++也有struct，几乎等同于class，它也引用一些很好的特性。『这两者之间有一点点和微小的差别』")]),t._v(" "),s("li",[t._v("好：数据和函数包在一起。将来怎么使用呢？以这1个为类型，为1种形式，我们创建出很多对象。然后在这个对象里面，然后去创建")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710142525088.png",alt:"image-20210710142525088"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("刚刚说过：对class的分类。最经典的分类：")]),this._v(" "),e("p",[this._v("1、里头带着指针『这个导致了，里头的指针，指向的内容在另外1个空间，然后Big Three』")]),this._v(" "),e("p",[this._v("2、里头不带指针")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("『这个会影响后面的写法，"),e("strong",[this._v("影响深远")]),this._v("』（重点知识）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这1页，告诉大家，当你去思考你"),e("strong",[this._v("要设计1个类。它里面是有1个指针")]),this._v("。你要非常小心。但是，我们现在要讨论的是没有指针的1个class这种先。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-1-obp和oop模式的对比⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-obp和oop模式的对比⭐️"}},[this._v("#")]),this._v(" 2.1.OBP和OOP模式的对比⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710142633224.png",alt:"image-20210710142633224"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("然后，关于『单个class』的分类")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"img/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/C++OOP%E4%B8%8A_15.jpg",alt:"C++OOP上"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("对1个class的设计，我们举例『复数和字符串』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-2-代码格式⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-代码格式⭐️"}},[this._v("#")]),this._v(" 2.2.代码格式⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710143019437.png",alt:"image-20210710143019437"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("在正式开始写程序之前。我们来谈一谈1个C++代码的基本形式：你会看到别人写的，以及你即将看到自己写的。")])]),t._v(" "),s("li",[s("p",[t._v("头文件"),s("code",[t._v(".h")])])]),t._v(" "),s("li",[s("p",[t._v("主程序"),s("code",[t._v(".cpp")]),t._v("『主程序如何去使用头文件，就用#include方式，其实"),s("code",[t._v(".h是.cpp")]),t._v("的1部分，只是因为"),s("strong",[t._v("角色的区分")]),t._v("。所以才把它分离开了，另外咋们的程序也可能会使用到标准库，"),s("strong",[t._v("标准库也是以头文件的形式提供的")]),t._v("，用"),s("code",[t._v("<>")]),t._v("的写法，至于标准库放在你硬盘的哪个地方，你不用管，因为你在安装你的集成环境的时候，编译器有些步骤")])]),t._v(" "),s("li",[s("p",[t._v("唯一的区别：")]),t._v(" "),s("ul",[s("li",[t._v("引用标准库的东西，用"),s("code",[t._v("<>")])]),t._v(" "),s("li",[t._v("引用你自己写的东西，用双引号『面试时候的区别，不是根据这个的』")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-3-编程习惯-防卫式声明⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-编程习惯-防卫式声明⭐️"}},[this._v("#")]),this._v(" 2.3.编程习惯-防卫式声明⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("大家写的任何1个头文件，都要写上一个，类似这样的"),e("strong",[this._v("防卫式的声明")]),this._v("！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710143449129.png",alt:"image-20210710143449129"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("写一个复数，应该放在头文件里面。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("头文件的写法：有1种正规写法『这个1拿出去，大家一看，你是受过正规训练的』\nQ 为什么要写这个东西呢？ \nA 因为很多程序可能会用到你这个头文件，或者你自己的程序也分成很多文件，也可能会被#include用到这个文件。\n#include含进的次序，如果说要求用的人它必须，先includeA然后是B然后是C，那么这个对于使用者来说，负担太沉重。\n\n对它而言，想要include谁都没关系，次序都没有关系。\n所以，为了这样，我们要写1个防卫式的声明。\n语法如下\n- 代码解释：1进来，如果不曾经定义过这个东西的话。那么就把它定义出来\n- 第2次引用的时候，这个名词就引用过了，，我们下面写的代码，就不会被进去。『 这样就不会用重复的include的动作』\n- 一般初学者不会去考虑这个，但是未来进入业界，正式写大的东西的时候，要记得我刚刚说的话！！\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-4-header（头文件）的布局⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-header（头文件）的布局⭐️"}},[this._v("#")]),this._v(" 2.4.Header（头文件）的布局⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710143824490.png",alt:"image-20210710143824490"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("写完，防卫式声明。中间1块，我们要放什么呢？？我们分为0、1、2这样的3个部分。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("『最主要是1和2』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712204956474.png",alt:"image-20210712204956474"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注意：有些函数在此，在本体body中直接定义。但是你也可以不在这里定义，你把他们**『全部』放在这里定义，OK。**")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("上面 opeartor+=函数没有{}，只是1个『声明』而已\n下面2个函数，有{}，是定义\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br"),e("span",{staticClass:"line-number"},[this._v("2")]),e("br")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("任何1个class，一定有个头（head）单独这1行")]),t._v(" "),s("li",[t._v("大括号"),s("code",[t._v("{ }")]),t._v("包起来的，这个叫"),s("strong",[t._v("class body")])]),t._v(" "),s("li",[t._v("这里面，你就开始要去设计，我的复数应该要具备什么样的数据、我应该要准备什么样的函数，才能去满足，使用复数的人的需求，比如共轭复数，设计结果如上。")]),t._v(" "),s("li",[t._v("然后，还有个奇怪的『friend』，你可能要设计另外1个类，另外1个单元，另外1个函数，说它要和它之间是1个朋友的关系。这些都是后面要提的")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205022063.png",alt:"image-20210712205022063"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("C++为了让你能避免重复，引出了解决这种需求的方法")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_03-构造函数-ctor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_03-构造函数-ctor"}},[this._v("#")]),this._v(" 03.构造函数(ctor)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("constructor（ctor，构造函数）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-1-inline-内联-函数⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-inline-内联-函数⭐️"}},[this._v("#")]),this._v(" 3.1.inline(内联)函数⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710145314082.png",alt:"image-20210710145314082"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("到底什么是inline呢？有什么好处？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("但是你的inline只是对编译器的一个建议而已，是不是真的变成Inline，由编译器决定")]),this._v("。『如上，PPT中那2个函数是inline 函数，但最终会不会变为inline function，不知道！！』，但我们看那个地方，这2个函数是如此的简单，想必编译器是有能力把它变为inline。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("注意")]),this._v("：上头那个函数，是在本题的『外头，定义的，但是我在『外头，给它也写了inline』，告诉编译器，你尽量帮我Inline。『注意：反正后面不在本体内定义的，我们可以加inline』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-2-访问级别-access-level-⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-访问级别-access-level-⭐️"}},[this._v("#")]),this._v(" 3.2.访问级别(access level)⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710145557644.png",alt:"image-20210710145557644"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("什么东西需要放为private的呢？当然是数据！因为我们希望，数据封装的，不要被外界任意看到，应该只有自己才能看到。")]),this._v(" "),e("li",[e("strong",[this._v("那么函数的部分呢？『也可以分2种，1种是要给外界用的，1种只是我处理私人事务的时候要做的』")])]),this._v(" "),e("li",[this._v("其实有第3种，叫protect保护的，但我们在例子里面不说他们。")]),this._v(" "),e("li",[this._v("上面的，访问区域段，可以任意出现顺序也可以交错")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("好的编码习惯：")]),this._v(" "),e("p",[this._v("『"),e("strong",[this._v("注意，数据一定，要通过它们的兄弟，它自己的函数来传递出去或者被设定，1个读，1个写，不能那样直接被外部拿或者写")]),this._v("』 除非，那个数据是public，但我们就是要避免这个事情！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205151034.png",alt:"image-20210712205151034"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("构造函数，是个大主题。")]),this._v(" "),e("li",[this._v("C++这个语言说：如果你想要创建1个对象，1个东西，有1个函数会被自动调用起来，不需要你调用，它自动就起来。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、有参数的创建对象\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、无参数的创建对象\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、动态的创建对象\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("构造函数，能写默认参数！这个没什么特别，其他的函数也可以写出默认值出来")]),this._v(" "),e("li",[this._v("构造函数特点的地方：名称、没有返回值类型『因为构造函数就是用来创建对象的，所以你不必写，你写，我还怕你写错』、")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("初始化列（"),s("strong",[t._v("initialization list")]),t._v("）和写在"),s("code",[t._v("{}")]),t._v("的assignments（赋值）的区别『简单说』，其实背后还有很多原理：")])]),t._v(" "),s("li",[s("p",[t._v("1个东西，它的数值的设定，有2个阶段。")]),t._v(" "),s("ul",[s("li",[t._v("1个是初始化")]),t._v(" "),s("li",[t._v("1个是后面再赋值。")])])]),t._v(" "),s("li",[s("p",[t._v("第1阶段，就是我们的『初始化列")])]),t._v(" "),s("li",[s("p",[t._v("第2阶段就是在"),s("code",[t._v("{ }")]),t._v("里面去赋值。")])]),t._v(" "),s("li",[s("p",[t._v("如果你不在『初始化中做』而是在{}中写，表示你放弃了『初始化的那个阶段』，虽然最后你还是把值放进去了。实现得晚，效率也差一些。")])]),t._v(" "),s("li",[s("p",[t._v("注意：你不可能在你的程序里面去『直接调用你的构造函数』，这不可能，没有这种语法。你只是要创建对象。")])]),t._v(" "),s("li",[s("p",[t._v("而创建对象上面3个都是例子，这个函数就自然而然的调用起来。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-3-class-『without』-pointers-members的特点⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-class-『without』-pointers-members的特点⭐️"}},[this._v("#")]),this._v(" 3.3.class 『without』 pointers members的特点⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205248623.png",alt:"image-20210712205248623"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("构造函数可以有很多个！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("重载：overload单词记住！！大厂总是说英语术语。。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("上面的PPT，我们每次1和2组成一组！")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("real上面的，"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("号取得值，"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("号设定值、这样写可以吗？？ \n    可以。因为函数可以重载，『注意，"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("号那个"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("肯定要划掉，因为是设定值。。。』\n    目前我们没讲"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n    \n注意：可能很好奇，为什么同名函数可以"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("个以上，既然一样的名称，将来调用的是谁呢？\n    其实编译器会把这些函数编成，右下角那个样子，只有编译器看得懂。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("li",[t._v("原因：\n"),s("ul",[s("li",[t._v("因为1号有默认参数，我们创建代码中，1和2都是没有给参数，写法虽然不一样，但是意思相同。")]),t._v(" "),s("li",[t._v("『左边的——2里面没有参数，所以可以候选，而1呢，虽然有参数，但是有默认值，感觉也可以调用，")]),t._v(" "),s("li",[t._v("编译器一看，2和1都可以调用，编译器会犯傻（也就是二义性！！）")]),t._v(" "),s("li",[t._v("『这种情况下，"),s("strong",[t._v("左边的2不允许被再写！！")]),t._v("』")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("函数重载，常常发生在『构造函数』身上，注意上面那种例子的函数！！不能那么写，因为冲突了")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_04-参数传递与返回值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_04-参数传递与返回值"}},[this._v("#")]),this._v(" 04.参数传递与返回值")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4-1-构造函数如果是private？⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-构造函数如果是private？⭐️"}},[this._v("#")]),this._v(" 4.1.构造函数如果是private？⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("面试考点：放到private区域，面试常常和『单例模式，放在一起』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205341235.png",alt:"image-20210712205341235"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("传递啥意思？？")]),t._v(" "),s("li",[t._v("放在private区域的函数，表示这个函数是不可以被调用的！！『被外界调用』")]),t._v(" "),s("li",[t._v("注意：我们下面，外界说：我要创建1个这种对象，构造函数就要被调用起来，可是构造函数又放在private中，不可以被构造啊，，所以这2个动作都是不可以的！！")]),t._v(" "),s("li",[t._v("Q   那可见，不应该有人把构造函数放在private区域咯？？？")]),t._v(" "),s("li",[t._v("A：也不是，既然提出来了，表示会有人这么做！什么情况要这么做呢？？")]),t._v(" "),s("li",[t._v("『就是，我不允许被外界创建对象！！』那这样，这个class有什么用？？？")]),t._v(" "),s("li",[t._v("下面是一个经典的写法！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205411584.png",alt:"image-20210712205411584"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("这是1个设计模式！！最简单的1个设计模式，我们不懂没关系!")]),this._v(" "),e("li",[this._v("但是设计模式中，有1个叫作“单例模式”，它就用到了我们刚刚所说的那一种，那一种写法『构造函数放在private中』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("演化意思就是单例。意思是，我设计这个A呢，我只要一份，外界只能用1份，所以它才不允许外界重建，那么那一份在哪里呢？？『"),e("strong",[this._v("那1份在黄色的部分")]),this._v("』是static的，我们还没有谈到static的特性。但我告诉你，它里头自己准备了一份自己。。各位看下面，"),e("code",[this._v("static A a")]),this._v("，，它的里面有个自己『然后，"),e("strong",[this._v("外界要的时候，不能够用那种传统的创建方式")]),this._v("，，，』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("要通过"),e("code",[this._v("A::getInstance().setup();")]),this._v("这个")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("构造函数讲完了，现在我们继续分析，在class的本体Body中，还有些什么要注意的呢？？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4-2-const成员函数？-奇怪的语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-const成员函数？-奇怪的语法"}},[this._v("#")]),this._v(" 4.2.const成员函数？-奇怪的语法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/C++OOP%E4%B8%8A_28.jpg",alt:"C++OOP上"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("函数这个部分，这一件事情是很多很多人会忽略的，包括你可能写了很多年的程序，你都会忽略。这个事情。但是它非常重要。『就是，"),e("strong",[this._v("在函数的后头加const，，一定要加在这个位置哈：小括号()的后面，大括号{}的前面")]),this._v("』")]),this._v(" "),e("li",[this._v("『我现在要引导你去想一件事情：对class立面的函数，有分为会改变数据的和不会改变数据的，2种。，，不会改变数据内容的，马上加上const。』所以，const函数的意思就是，我不改变数据的内容。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"『后果』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#『后果』"}},[this._v("#")]),this._v(" 『后果』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("可能写成，"),e("code",[this._v("const class名字 对象")]),this._v("和"),e("code",[this._v("class名字 const 对象")]),this._v("，，意思是说：我这个对象或者说是变量的内容，一定是不动的，不可以改变的。『万一，我用这种对象去调用去调用它的成员函数，万一你没有写const会是什么意思？？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("关于：const用来修饰这个函数，像这样，修饰变数，"),e("strong",[this._v("const用来修饰函数的这个主题呢，还有很多事情要讨论。不过目前这样就可以了，我们就可以继续下去。")])])]),this._v(" "),e("li",[e("p",[this._v("我们这样写，就很"),e("strong",[this._v("正规『可能你会想，如果使用者不这么用的话，就不会出错啊，，，但是我们要想得更周全一些")]),this._v("。』")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205509284.png",alt:"image-20210712205509284"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("这个主题，也是我们在判断，你写的代码，也许可以，你的程序也许可以运作，但是你有没有受过好的正规训练。『我会看123，某几个点，这个就是其中一个点，就是你参数的传递呢，是pass by value，，有没有用到pass by reference")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("它的形式是这样的：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("解释by value和by reference")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("黄色圈起来的，全部都是参数，任何人要调用他们的时候，都药把东西传进去，这个叫pass传递参数。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("&这个符号，在这不是取地址的意思。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("『标题上：pass by reference (to const)，，标题上上，也"),e("strong",[this._v("可能不是const『就是我们PPT中的2-7这种情况")]),this._v("』』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("『标题上说的3种情况，在这都出现了』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("By value，就是整包传递过去了。。这个value多大，它就整包都传递过去了。传的动作，其实是压到函数的stack栈中。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("By reference，")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("『我们要养成习惯，尽量不要pass by value！！！因为怕传递得太大了』那这样的时候，我们怎么办？？过去C语言可以传递指针，，这包东西太大了，我传递个地址吧。所以，很快。。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("『然后，现在呢，我有一个东西呢，像指针，但是更加漂亮，C++的就是reference引用，，，引用看起来摸不着。。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("『"),e("strong",[this._v("给你建立概念：引用在底部就是一个指针！！所以，传引用就相当于传递指针那么的快，但是它的形式又很漂亮")]),this._v("。。』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("PS：C语言的经验，指针传递过去，那边那个函数一旦修改，就会影响我了，因为，我们是传递指针。那传递引用也有这个效果！！！是不是呢要的呢？有时不是。。")]),this._v(" "),e("li",[this._v("『如果传递过去，只是为了速度，并不希望你改就该我，我可以传递refernence to const、、我传给你，但是你不能去修改这个内容。因为你一旦修改，就会影响我。。。。"),e("strong",[this._v("如果你改了，编译就会出错")]),this._v("！！！』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("结论：参数传递，"),e("strong",[this._v("尽量")]),this._v("都穿引用『当然，char啥的，随便你，，，")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205536615.png",alt:"image-20210712205536615"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("延续前面的话题，用来作为返回值的传递。")]),t._v(" "),s("li",[t._v("『"),s("strong",[t._v("这个地方很小，但是会影响到，C++程序的效率，为什么你会选择来学C++，多半是，你考虑到它的效率")]),t._v("，它的效率比其他的面向对象语言，更快。所以，"),s("strong",[t._v("我们在每一个影响效率的小节上，我们都要注意：把它内化成，我们的习惯")]),t._v("。』")]),t._v(" "),s("li",[t._v("『"),s("strong",[t._v("现在说，返回值的传递，也尽量by reference』尽量的前提，当然是，如果可以的话")]),t._v("。也有不少情况是不可以的！！在谈了这个主题之后的后面会出现。")]),t._v(" "),s("li",[t._v("尽量的：是在可以的情况下！！什么是可以，不可以，我们在后面讨论！！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205608505.png",alt:"image-20210712205608505"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"『友元』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#『友元』"}},[this._v("#")]),this._v(" 『友元』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("我们身上的钱，任何人可以来拿吗？当然不行。。朋友可以来拿吗？看你在现实生活中如何定义")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("朋友太多了，是不是会有困扰。。。显示不知道，但是在C++中强调封装。朋友的话，就打开一个封装的大门。。")]),this._v(" "),e("li",[this._v("所以：用朋友的设计还是非朋友的设计，看你自己")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205631574.png",alt:"image-20210712205631574"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("结论：")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("有一个问题，常常被提起，甚至于很多年工作经验的程序员，也会被提起。"),s("strong",[t._v("它可能在日常生活中已经习惯怎么写了，它知道这样写是对的，可是它解释不出来")]),t._v("！！")]),t._v(" "),s("li",[t._v("『上面的黄色部分函数：这个函数"),s("strong",[t._v("是处理另外一个复数。。。竟然是直接拿，没有透过函数")]),t._v("』这不是破坏了封装性吗？也没有出现friend的字眼。个位整理一下，现在是什么情况？？")]),t._v(" "),s("li",[t._v("很多个角度去解释：")]),t._v(" "),s("li",[t._v("1、相同的class做出来的对象，彼此互为友元『解释了，这个行为看起来打破了封装，但是其实是成立的』")]),t._v(" "),s("li",[t._v("2、有的人解释这个事情，不是用这句话。。也解释得通，但是我想这句最好。。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205710331.png",alt:"image-20210712205710331"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"『习惯』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#『习惯』"}},[this._v("#")]),this._v(" 『习惯』")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("注意：")]),t._v(" "),s("li",[t._v("1、数据一定放在private里面")]),t._v(" "),s("li",[t._v("2、参数尽可能用reference来传，能不能cosnt看情况")]),t._v(" "),s("li",[t._v("3、返回值一样")]),t._v(" "),s("li",[t._v("4、在类的本体中，这些函数应该加const就要加，不然，使用者可能会报错！！\n"),s("ul",[s("li",[t._v("5、构造函数，有个特殊的语法，初始化列，那个要尽量去用它。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("什么情况是不能return by reference??")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("一个函数的操作结果，要放在什么位置上呢？？如果函数必须创建一个地方来让他放！『下面2种』")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("1、如果返回的，是放在一个你"),s("strong",[t._v("本来已经有")]),t._v("的空间上面。。『可以传递引用』")]),t._v(" "),s("li",[t._v("2、如果函数必须创建一个地方来让他放！!这个东西，返回之后，生命消失了，"),s("strong",[t._v("『这个就不能return by refernce』")]),t._v("『"),s("strong",[t._v("除了这种情况，我们都可以去传递引用")]),t._v("』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_05-操作符重载与『临时对象』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_05-操作符重载与『临时对象』"}},[this._v("#")]),this._v(" 05.操作符重载与『临时对象』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205809562.png",alt:"image-20210712205809562"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("操作符重载：：是个很大很大的问题、是一个C++的很大的特性！！")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("先讲：操作符重载之1『等会有之2』")]),t._v(" "),s("li",[t._v("1和2的区别：成员函数或者是非成员函数。")]),t._v(" "),s("li",[t._v("『看右边：我们分析"),s("strong",[t._v("操作符是怎么被编译器所看待的！！！『重要")]),t._v("』』")]),t._v(" "),s("li",[t._v("二元操作符：我"),s("strong",[t._v("们通常会讲左数和右数。『编译器看到蓝色箭头哪一行，它会把符号作用在左边身上")]),t._v("。。如果左边的这个东西有趣对这个符号做定义的话，编译器就找到了。。。把这一行就编译成要去调用那个函数。")]),t._v(" "),s("li",[t._v("『我把它隐藏的东西挖出来给你。。』所有的成员函数一定带着一个隐藏的参数，这个参数叫作this。。")]),t._v(" "),s("li",[t._v("『取这个名字的原因是：谁调用我，谁就是this』this是我们写代码不必写，也不能写，你写出来就错了。。")]),t._v(" "),s("li",[t._v("『注意，这个this指针我现在把它显示出来放在第一个参数，一定是这样吗？？不一定，不同的编译器行为都不一样，有的会把它在最后一个参数去。反正我们写代码看不到，不影响我们写代码』但是放在哪里都无所谓，反正有这么一个东西。")]),t._v(" "),s("li",[t._v("+=啥意思，右边加到左边身上去。『左边框框那样写的原因，相比是左上角的，其他地方也会这么用")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205845871.png",alt:"image-20210712205845871"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("引用。黄色部分，return *this对象，但是"),s("strong",[t._v("接收端")]),t._v("却用引用，这样对吗？？『可能的语法疑问』"),s("strong",[t._v("『易错")]),t._v("！！』")]),t._v(" "),s("li",[t._v("对的！！原因**：用引用传递的好处：传递者无需知道接受者，是以引用的形式接收**。")]),t._v(" "),s("li",[t._v("如果用指针传递：传递者必须知道现在传递的什么，要有个特殊符号。。")]),t._v(" "),s("li",[t._v("设计：或许你说，左下角的，你可能会返回类型是void，好像也可以。如果使用者只有单个这么用，那当然可以。但是『使用者』可能会这么用连串的+=，所以，我们这个时候就不能返回void了")]),t._v(" "),s("li",[t._v("因为，加完之后还要当成右值。『当使用者没有连串使用的时候，OK，如果连串使用的话，是需要另外思考的』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205917907.png",alt:"image-20210712205917907"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("本体以外的部分，要么是：类的成员函数外界定义，要么是：全局函数")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712205944769.png",alt:"image-20210712205944769"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-1-临时对象』重要"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-临时对象』重要"}},[this._v("#")]),this._v(" 5.1.临时对象』重要")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210024224.png",alt:"image-20210712210024224"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("考量：他们返回的，为什么不是引用，为什么最优先考量的不是引用呢？")]),t._v(" "),s("li",[t._v("『"),s("strong",[t._v("为什么绝对不可以？？因为他们返回的必定是个『局部变量，，』先前是没有那个东西的，是在函数中创建")]),t._v("的』")]),t._v(" "),s("li",[t._v("自己死掉了，外界如果引用，就用到了错误的东西。")]),t._v(" "),s("li",[t._v("注意：不是说要在函数里面创建个东西吗？？这里好像没有看到。。这里有个特殊语法！！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"『临时对象特殊语法』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#『临时对象特殊语法』"}},[this._v("#")]),this._v(" 『临时对象特殊语法』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("tyname()")]),this._v("这种写法，在"),e("strong",[this._v("标准库中其实很常见")]),this._v("到  !!!『STL源代码中有？？』")]),this._v(" "),e("li",[this._v("我们必须熟悉他们。。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("就好像 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    过去你习惯的是"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i\n    然后你去用这个i\n    现在是不一样！！\n    \n    现在，我们的是"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v("直接加小括号，只不过里头有参数就是了。。\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" 加上"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("就是要创建临时对象，，什么叫临时对象呢？？就是我临时才要的，我不想给他名称。。\n    它的生命到下一行就结束了。。\n    那么，下一行就结束了，而且没有名称，适合我们现在这样的用法吗？？适合。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("『我们看右边，注意！黄色的部分，其实其实也是临时对象！！其实它的语法，就是左边！！")]),this._v(" "),e("li",[this._v("『这个语法所谓"),e("strong",[this._v("特殊呢。。一般人少用，但是标准库用得很多！")]),this._v("！』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210101450.png",alt:"image-20210712210101450"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("上面那个不是加号，『是正号！！』数学上表示一个的，就是表示正号。")]),t._v(" "),s("li",[t._v("正号的，那个其实应该可以传回引用、。。标准库这么写，，为什么呢？？会写错吗？？")]),t._v(" "),s("li",[t._v("标准库这么厉害的，会写错吗？？那个很难说。。。"),s("strong",[t._v("它比没有错，。只是写得不是最好的")]),t._v("！！『下载习题，自行尝试，我相信是可以的』")]),t._v(" "),s("li",[t._v("注意："),s("strong",[t._v("标准库的那些很棒的人。他们所写的标准库，并不是圣经。不是说它绝无挑剔之")]),t._v("处。。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210144391.png",alt:"image-20210712210144391"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("接下来")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210212112.png",alt:"image-20210712210212112"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"『重载-操作符的特殊』『易错』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#『重载-操作符的特殊』『易错』"}},[this._v("#")]),this._v(" 『重载"),e("code",[this._v("<<操作符")]),this._v("的特殊』『易错』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("任何一个操作你都有2种想法，设计为"),e("strong",[this._v("全局（全域）函数")]),this._v("or"),e("strong",[this._v("成员函数")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210301277.png",alt:"image-20210712210301277"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("既然，<<的重载，"),s("strong",[t._v("是把右边输出到左边身上")]),t._v("！")]),t._v(" "),s("li",[t._v("『"),s("strong",[t._v("cout<<会把<<符号作用到左边身上！是不可能作用到右边身上的！！C++的语法就没有这种作用到右边身上的这种语法！！")]),t._v("』")]),t._v(" "),s("li",[t._v("左边是什么？是标准库定义的一种东西，我们现在不去深究他们，你把他们想象是代表屏幕，要输出到屏幕上去。这个是标准库早就写好了，可能是10年前写好的，不可能认识你写的class，所以，对于『"),s("strong",[t._v("operator <<』读作『output operator")]),t._v("』我们"),s("strong",[t._v("绝对不要把这种操作符写成一个成员函数")]),t._v("！！『注意注意：这种特殊的操作符重载，你没得选，你只能选一种。。不能写成成员函数！！！就是全局的那种，"),s("strong",[t._v("原因刚刚告诉")]),t._v("你了！』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("operator <<")]),this._v("这个中间有没有空格无所谓！！提过，C++和C语言都是free firmat，自由形式。你要加几个空格都无所谓！首先考虑传引用，看有没有副作用。可以要不要加const？？因为os不可以改")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("本来返回值或许是void可以，但你如果想得远一点，你的使用者如果是一种连串的输出。。你就得引用了『"),e("strong",[this._v("设计者的角度，牛皮")]),this._v("』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_06-复习complex类的实现过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_06-复习complex类的实现过程"}},[this._v("#")]),this._v(" 06.复习Complex类的实现过程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("章节总复习。")])]),this._v(" "),e("li",[e("p",[this._v("设计一个class的注意：")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1、构造函数的初始化列表：不会用的话，可能训练不太精良，虽然最后结果可能一样。\n2、函数应该要加const就加，万一该加没见，可能会有副作用\n3、参数的传递，尽量referen ce，而且要不是const要考虑\n4、return要不要refernce\n5、『数据尽可能的放在私有里面，几乎没有例外啊！！！』函数绝大部分，要放在public，当然单例就，，\n因为你的函数主要是被外界调用。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("完整的范例程序是标准库写的，我拿出来，拿掉一些没学的，你得到的范例程序会多很多。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210336851.png",alt:"image-20210712210336851"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在类的里面写出来『定义』的，已经是inline了，，你要写个inline去建议！！")]),this._v(" "),e("li",[this._v("没有写出来的，我们可以让他是inline函数，如下，整个函数 的全名是"),e("code",[this._v("Complex::operator +=")])]),this._v(" "),e("li",[this._v("『至于+=的左边和右边，左边是作为一个隐藏的参数放进来，我们直观右边』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210404912.png",alt:"image-20210712210404912"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("下面")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210430019.png",alt:"image-20210712210430019"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("设计全局函数，然后我们和谷歌想法一样设计为inline")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210453996.png",alt:"image-20210712210453996"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("注意：红线的，尽量要避免！！！完全违背过去使用的习惯")]),this._v(" "),e("li",[this._v("是可以写出来这样用！！但是使用者可能会很惊讶。。它不喜欢这样，它应该避免。『正是因为这样，操作符这种，只好把它写成非成员函数？？』『23分钟』")]),this._v(" "),e("li",[this._v("**乍看置下：好像OS不会被改变，如果你基础不够的话。。其实它会改变，它的状态会改变。但是必须是有经验的人，或者是你必须去查手册才会知道。。。因此传进来的时候，**不能是consrt")]),this._v(" "),e("li",[this._v("你将获得的代码")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("complex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h\ncomplex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp\nstring"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h\nstring"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"『class之不带指针部分讲完』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#『class之不带指针部分讲完』"}},[this._v("#")]),this._v(" 『class之不带指针部分讲完』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("下面开始带指针的分类！！！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_07-big-three⭐️『class-with-pointer-members开始』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_07-big-three⭐️『class-with-pointer-members开始』"}},[this._v("#")]),this._v(" 07."),e("code",[this._v("Big Three")]),this._v("⭐️『class with pointer members开始』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_7-1-记忆3大函数：拷贝构造函数，拷贝赋值函数，析构函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-记忆3大函数：拷贝构造函数，拷贝赋值函数，析构函数"}},[this._v("#")]),this._v(" 7.1.记忆3大函数：拷贝构造函数，拷贝赋值函数，析构函数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("我们接下来要谈的是另外一个经典的例子，这个例子是里面带着指针的，那这种情况常发生吗？")]),this._v(" "),e("li",[this._v("常发生啊，我要拿string字符串来作为我们讲解的对象。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710153858136.png",alt:"image-20210710153858136"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("下面3个特殊函数『就是框框框起来的4个中后3个』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710161002475.png",alt:"image-20210710161002475"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("构造和析构函数")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710161307085.png",alt:"image-20210710161307085"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("所以强调一点，你的class如果里头有指针，多半你就是要做动态分配！！！！")]),this._v(" "),e("li",[this._v("像这样，你既然做了动态分配，那么这个对象要死亡之前的前一刻，析构函数会被调用起来，你就必须在虚构函数这里面把你动态分配。被它的内存释放掉")]),this._v(" "),e("li",[this._v("Big three啊，我们已经刚刚讲的构造函数算big three吗？不是!!!!")]),this._v(" "),e("li",[this._v("记忆：内存泄漏（memory leak）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710161438991.png",alt:"image-20210710161438991"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("拷贝构造函数")]),t._v(" "),s("li",[t._v("copy assignment operator念起来也太长，写起来也太长，所以我就把它写成copy op=")]),t._v(" "),s("li",[t._v("而这一块呢，两个指针指向它，也非常危险，因为将来你改a，d就跟着受影响。所以这一种叫"),s("strong",[t._v("浅拷贝")]),t._v("!!")]),t._v(" "),s("li",[t._v("那什么叫"),s("strong",[t._v("深拷贝")]),t._v("呢？就是我们要去写的这个函数里头要做的事情。")]),t._v(" "),s("li",[t._v("如上，深浅拷贝『面试考。。。！！！』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_7-2-拷贝构造"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-拷贝构造"}},[this._v("#")]),this._v(" 7.2.拷贝构造")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710161525948.png",alt:"image-20210710161525948"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("拷贝赋值函数")]),t._v(" "),s("li",[t._v("好，我们往下看啊，这一页跟你解释为什么你一定要写自己的一个版本。\n我们来看看什么叫做深拷贝。")]),t._v(" "),s("li",[t._v("Q1  这一个函数叫拷贝构造，为什么叫拷贝构造呢？？？？\n这是一个构造函数，因为它的名称跟类的名称相同，所以这是一个构造函数。")]),t._v(" "),s("li",[t._v("Q2  为什么叫拷贝呢？\n因为他收到的参数就是他自己这种类型石头拷贝给石头。人拷贝给人，猪拷贝给猪，所以这个叫做拷贝构造函数。")]),t._v(" "),s("li",[t._v("空间创造出来之后呢，把内容拷贝过去，这个叫深拷贝。")]),t._v(" "),s("li",[t._v("如果你没有写这个函数，编译器给的那个默认版本，只有把指针拷贝过来，那个就是浅拷贝。")]),t._v(" "),s("li",[t._v("那个钱拷贝也就是刚刚这一张图，这是我们要避免的。因为这样造成这一块内存泄漏，又造成这一块很危险，为什么危险？")]),t._v(" "),s("li",[t._v("两个人在看同一个东西！！！这个叫alias，别名的意思，就这一块呢呃又叫a，又叫b，这个叫别名。")]),t._v(" "),s("li",[t._v("你有一个名称是你的姓名，是你的学名，你在。\n家里可能叫三毛，叫这个小华，这是你的小名，是你的别名。")]),t._v(" "),s("li",[t._v("-那么在这个编程里头呢，别名是一件危险的事，要特别注意。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_7-3-拷贝赋值函数『注意概念，非常容易错！』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-拷贝赋值函数『注意概念，非常容易错！』"}},[this._v("#")]),this._v(" 7.3.拷贝赋值函数『注意概念，非常容易错！』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210710163641769.png",alt:"image-20210710163641769"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("学习大家风范")]),t._v(" "),s("li",[t._v("如果你有指针的话，那你要怎么写呢？经典写法就是这样，一、二、三。可是你看到前面还有一个动作，\n这个要"),s("strong",[t._v("功力深厚的人")]),t._v("才会写出这一块啊那你现在一起手就要有一种大家风范，你也要会写这一块。")]),t._v(" "),s("li",[t._v("检测那里，比如，可能是啊因为指针的名称也许变动了啊，或者后将来我们要讲继承的概念啊。")]),t._v(" "),s("li",[t._v("反正会发生，只是你看起来不像有可能发生，所以要去做检测。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_7-4-大师风范-检测是否：『坑点』自我赋值-self-assignment-⭐️⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-大师风范-检测是否：『坑点』自我赋值-self-assignment-⭐️⭐️"}},[this._v("#")]),this._v(" 7.4.大师风范-检测是否：『坑点』自我赋值(self assignment)⭐️⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("优点：如果左边等于右边啊自我负值的话，就直接return ，不做事情了。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("效率高。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("第2件事情是，如果你没有这么做，你现在这么做的话呢，刚刚的解释是效率高？？\n但如果你根本没有想过这要这么写的话，你只写下面一、二、三好像也不会出错啊，"),e("strong",[this._v("所以只是效率的高低而已，是这样吗？")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[e("strong",[this._v("不是不是")]),this._v("，如果你没有写这两行，"),e("strong",[this._v("甚至于可能结果会出错，不只是影响效率而")]),this._v("已，我们来看看发生什么事情。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("结论：所以我们做一个整理，就是写这个自我赋值不只是为了效率，还是为了正确性，所以这个是非常重要的")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210639595.png",alt:"image-20210712210639595"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("如果你没有写这一块，而你的使用者呢他也没有自我赋值，那也就算了，安全过关侥幸。\n但如果他按他自我赋值的话，你的使用者自我赋值的话，你这边不写这一块是会错的，结果会出错。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_08-堆，栈与内存管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_08-堆，栈与内存管理"}},[this._v("#")]),this._v(" 08.堆，栈与内存管理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("上一节：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712210702154.png",alt:"image-20210712210702154"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("这是在我要讲解的最后一个有关于字符串的一个函数。这个在语法上已经没有什么特别的地方了。\n呃，由于我们在测试程序里头想要对我们的字符串做输出，打印到我们的屏幕上。所以跟之前对复数的想法一样，我们也要写一个操作符的重载。\n这个叫output operate，也就是这个<<。那么这个思考方式呢呃跟之前完全一样，我们要准备这应该会要写成一个成员函数还是一个全局函数呢？\n不可以是一个成员函数，因为如果把它变成一个成员函数字符串的成员函数的话，使用者在用的时候，那个方向会相反。那个cout会本来大家都习惯在左边，\n现在变成在右边啊，这个是大家没办法接受的，所以一定要变成是一个全局函数。然后他的参数呢应该有两个。\n左边那个是cout，也就是这个ostream。右边呢，现在我们的例子是字符串，就是这一个")]),this._v(" "),e("p",[this._v("其他的这个想法呢都跟先前一样。任何东西如果你丢给ostream 可以被他接受的话，那你在这个<<里面就直接这样子用好了。\n现在我们这个字符串里面有没有什么东西是可以直接丢给cout而被他接受的呢？")])]),this._v(" "),e("li",[e("p",[this._v("栈和堆")])]),this._v(" "),e("li",[e("p",[this._v("所谓stack（栈），所谓heap（堆）")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712215044905.png",alt:"image-20210712215044905"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("动态取得怎么样动态取得就是用new。")]),this._v(" "),e("li",[this._v("new 这一种创建方式跟上一种创建方式的差别是。你可以在认程序的任何地方，以new 的方式动态或者这一块。\n而你动态获得，你就有自己有责任要去对立着他，去释放它。现在并没有释放这个delete 的写法。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_8-1-stack-objects的生命期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-stack-objects的生命期"}},[this._v("#")]),this._v(" 8.1."),e("code",[this._v("stack objects")]),this._v("的生命期")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712215119294.png",alt:"image-20210712215119294"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("stack object. 的生命其只要离开作用域。他的生命就消失了就结束了。结束的时候，他的吸构函数就会被调用起来。")]),this._v(" "),e("li",[this._v("所以这一种叫做local object。又叫做auto object。")]),this._v(" "),e("li",[this._v("叫auto 的意思就是因为他会被自动的。这边说自动的清理，意思就是他的吸构函数会自动的被调用起来。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_8-2-static-local-objects的生命期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-static-local-objects的生命期"}},[this._v("#")]),this._v(" 8.2."),e("code",[this._v("static local objects")]),this._v("的生命期")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712215200390.png",alt:"image-20210712215200390"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("另外有一种东西叫静态staic object")]),t._v(" "),s("li",[t._v("他的写法是这样，在scope里头，一个作用域里头，本来这是一个local 的对象，或者叫做一个auto的对象。\n我们刚刚介绍了这个术语。如果在他前面加上这个关键字的话，那就是静态的static 的对象。\n他的生命又有什么不同呢？")]),t._v(" "),s("li",[t._v("他的生命在作用域结束之后仍然存在！！也就是离开这个大括号之后呢，他还在！！")]),t._v(" "),s("li",[t._v("那么他的。析构函数就不会在这个时候被调用。那他什么时候被调用，一直到整个程序结束。")]),t._v(" "),s("li",[t._v("这是这种静态对象的特性。\n如果你需要这种特性，你就得这么写。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_8-3-global-objects的生命期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-global-objects的生命期"}},[this._v("#")]),this._v(" 8.3."),e("code",[this._v("global objects")]),this._v("的生命期")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712215241682.png",alt:"image-20210712215241682"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("我们再往下看。还有一种对象叫全局对象。")]),this._v(" "),e("li",[this._v("写在任何作用域之外的：你也可以说在全局作用域之中。啊，『任何大括号之外的。』叫做全局对象，那他的生命竟然叫全局或者叫全域作用域，全域。")]),this._v(" "),e("li",[this._v("可见他的生命一定是。在很早在什么，在main更早之前就存在了。而他的生命在main结束之后，他才消失掉。他所谓的存在或消失，我们联想到的就是这个对象。这个object 的构造函数跟析构函数什么时候被调动起来。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_8-4-heap-objects的生命期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-heap-objects的生命期"}},[this._v("#")]),this._v(" 8.4."),e("code",[this._v("heap objects")]),this._v("的生命期")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712215324099.png",alt:"image-20210712215324099"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("内存泄漏的意思就是你本来有一块内存，可是经过某些时间或某些作用域之后，你对他失去了控制。以至于你根本没有办法把它还给还给任何人，还给操作系统，")])]),this._v(" "),e("li",[e("p",[this._v("这当然是不好的，因为内存是一个很重要而有限的资源。")])]),this._v(" "),e("li",[e("p",[this._v("比如右上方：这个指针p在离开这个作用域之后，这个指针本身就死亡了。但是指针所指的那一块空间还在。这个就是内存泄漏。")])]),this._v(" "),e("li",[e("p",[e("code",[this._v("new：先分配memory，再调用ctor")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712215425387.png",alt:"image-20210712215425387"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("我得到了指针。这个new 呢被编译器转化为你可以想象啊，其实这个写法也非常接近现实。\n我们不知道现实是不是所有的编译器都这样啊，不过。可以说绝大部分都变成这种情况。\nnew. 被分解为三个动作。\n第一个就是分配内存。用哪一个函数来做这件事情呢？operate new.\n老师好像在讲绕口令一样。\n刚刚讲的是new。现在又调用。operate new.\n现在告诉你，『其实后面这个蓝色的operate new，它只是名字比较奇特的一个函数。』\n『这个函数的名称就是operate 空一格加new。』\nc 加加提供了一个比较特别的函数。\n这一个函数的内部做什么呢？我们其实是可以看到它的源代码的，我也看过了，告诉你他里面调用的就是malloc。\n这是c 里面分配内存的函数。\n所以new 切成三个动作的第一个动作调用这个函数，也就相当于调用malloc")])]),t._v(" "),s("li",[s("p",[t._v("第二个动作是次要的啊，不是我们的主角。\n第2个动作是什么呢？只是把第一个动作得到的指针，它是point to void。\n但是我们当初new 的时候是要用负数。\npointer to complex\n这两个形态不符合。\n所以二把它作为一个转型。")])]),t._v(" "),s("li",[s("p",[t._v("三呢？通过这个指针，刚刚二得到了这个指针。\n调用这是什么？\n这是一个。函数名称跟class相同的函数。\n所以它是一个构造函数。")]),t._v(" "),s("p",[t._v("好，那就符合语法书告诉我们的了。\n第一，先分配内存啊，第二次转型，第三是调用其构造函数。")])]),t._v(" "),s("li",[s("p",[t._v("谁调用这个函数，谁就是this『所以pc也就是这里隐藏的这个参数this")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712215449726.png",alt:"image-20210712215449726"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("你的语法书也会告诉你delete做的事情是先调用析构函数在释放内存。")]),this._v(" "),e("li",[this._v("new")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712215548707.png",alt:"image-20210712215548707"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("delete")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712215606153.png",alt:"image-20210712215606153"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("我们开始讲这个秘密")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210712215642279.png",alt:"image-20210712215642279"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("没有任何书籍来说他。是我去观察源代码，在观察执行结果之后得到的一个心得。这是很宝贵的一个分资源。")])]),t._v(" "),s("li",[s("p",[t._v("还要带着两个，这里是说话的橘色呃，"),s("strong",[t._v("砖头颜色的这两")]),t._v("个。这是什么呢？这个叫cooking。\n呃，cookie 就是小甜饼干的意思。")])]),t._v(" "),s("li",[s("p",[t._v("你现在要追一个内存好系统说那我付一个小甜饼安给你，就是这个口气。\n它的作用。")])]),t._v(" "),s("li",[s("p",[t._v("到52。在vc 底下呃，我刚刚。我记得题吗？我也忘记，我说了没有。这是在vc 底下，在其他编译器底下的内存分配。比如说GNUC私底下呢跟这个非常像痣，但是这个大小就不一定跟VC相同。")])]),t._v(" "),s("li",[s("p",[t._v("精神是一样的。好，在vc 底下这个加起来等于52，vc 他给你的每一个区块，每一个内存块是。一定是16的倍数。这是有原因的，但是现在没办法提啊，所以每一块都是16的倍数。五十二不能除以十六。最靠近五十二的十六倍数是64")])]),t._v(" "),s("li",[s("p",[t._v("所以这一块还要在填补一些东西进去，就是这里深绿色的pad 配的就是一个填补物。")])]),t._v(" "),s("li",[s("p",[t._v("我在这张图上画。你得到一个两个double 的一块空间。\n其实并不是这样。\n其实是怎么样呢？\n是现在这个图。\n多得的这么多东西。\n这不是太浪费了吗？\n嗯。\n"),s("strong",[t._v("但是是一种必要的浪费")]),t._v("。因为以后回收的时候需要靠这些某些东西来顺利的回收。\n对作业系统而言，操作系统而言。")])]),t._v(" "),s("li",[s("p",[t._v("那么对于我们呃呃学生啊，刚开始学习写程序的，也许你不会进入调试模式。\n你不会想要进入调试模式底下啊，你一般用的是release mode\n那这样的话，把灰色的拿掉。\n再算一次。复数有八个字节。两个double。\n不需要加这个比八个黑的。\n然后一定要加上下cookie，这是一定要的。\n加完之后呢，八加四乘以2=16。")]),t._v(" "),s("p",[t._v("十六。就说十六的倍数。所以不需要调整，不需要加上这个深绿色的pad。")])]),t._v(" "),s("li",[s("p",[t._v("上下cookie 做什么用？最主要的是他要记录整块给你的大小。为什么要记住这个东西呢？\n因为将来系统回收的时候。你只给他一个指针。他怎么知道要回收多大？\n所以必须有在某一个地方记录这个长度。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_16的倍数的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16的倍数的使用"}},[this._v("#")]),this._v(" 16的倍数的使用")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("六十四的十六进位就是四零。40。\n这边记录是四一。\n为什么呢？他本来应该是四零。\n四零。借用最后一个bit，it 最后一位最后一个bit，it 零或一来表现，我这一块是给出去还是？收回来。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("为什么可以借最后一个bit 的来使用？")]),t._v("\n因为"),s("strong",[t._v("我们的这个都已经调整到十六的倍数")]),t._v("。\n十六倍数的话，最后四个bit 的都是零啊，各位想一想。\n最后四个四个位都是零，所以可以借其中一个来用。")])]),t._v(" "),s("li",[s("p",[t._v("在字符串呢？字符串本身之内还是一根指针。所以它的大小是指针的大小就是四。\n我这里并没有按照同比例来画啊，请大家注意。但是我里面的这个数字是正确的。\n这个是4。在"),s("strong",[t._v("调试模式")]),t._v("底下。要加上"),s("strong",[t._v("灰色的")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("看看四十八是十六的倍数吗？\n是。")])]),t._v(" "),s("li",[s("p",[t._v("所以就不需要加这种深绿色的pad。呃，四十八。")])]),t._v(" "),s("li",[s("p",[t._v("十六进位是三零。所以这边写的是三，应该是三零，但是它这一块给你了，所以写的是31这么写31。\n如果你把它还给操作系统，这里就会变成30。")])]),t._v(" "),s("li",[s("p",[t._v("如果你在。")])]),t._v(" "),s("li",[s("p",[t._v("非调试模式之下，那就没有这个灰色的了，没有这个灰色的。那我们再算一次。你现在有一个字符串里头只有一根指针，所以它的大小是四个bug，四个字节。要加上上下估计四乘以二。加完之后是十二。")])]),t._v(" "),s("li",[s("p",[t._v("十二要调到十六的边界。16的倍数，所以是十六。")])]),t._v(" "),s("li",[s("p",[t._v("十六呃十六进位就是一零啊，所以这里是一零。"),s("strong",[t._v("给出去了所以是11")])])]),t._v(" "),s("li",[s("p",[t._v("而现在告诉你，其实你真正获得的是。这么多。告诉你运算的方式。")])]),t._v(" "),s("li",[s("p",[t._v("当然了，你不知道这些事情对于你编程并"),s("strong",[t._v("没有立即")]),t._v("的影响。但是知道他这心中自有丘壑啊，我们会更能够更能够彻底掌握。")])]),t._v(" "),s("li",[s("p",[t._v("现在谈一谈，如果分配的是数组array会怎么样")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722140807162.png",alt:"image-20210722140807162"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在调试模式底下要加上那个Debugger Header")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"『核心』delete的析构次数-free大小"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#『核心』delete的析构次数-free大小"}},[this._v("#")]),this._v(" 『核心』delete的析构次数+free大小")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722140844945.png",alt:"image-20210722140844945"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("如果没有搭配的话呢，很多人都说会造成内存泄漏。现在来告诉你对，会造成内存泄漏。但是也许不是你想象的那种内存泄漏。")]),this._v(" "),e("li",[this._v("那个3记录总是在的，我们无论调用【】还是没有，free函数还是能正确弄掉3个")]),this._v(" "),e("li",[this._v("重要："),e("strong",[this._v("主要是dtor析构函数的次数的区别！！")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("cookie 是的确是有完整记录这一块")]),this._v("。")]),this._v(" "),e("li",[this._v("所以删掉这一块是没有问题的。")]),this._v(" "),e("li",[this._v("不会造成内存泄漏。\n这边写中刮号。或者右边这边没有写中国号，都不影响这一整块的番薯。\n因为这一整块的大小就记录在这里。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("没电。所以。虽然再三的告诫大家要搭配array delete 要这么写啊，不要右边这么写。\n"),e("strong",[this._v("但是问题并不是出在这一块")]),this._v("。\n发生内存泄漏不是这一块没有发生热水器。\n问题是出在哪里呢？出在于。你这么写的话，编译器才知道你要删除的是一个数组。\n他才会知道，下面原来不是只有一个。\n而是有三个。\n那知道有三个他才知道要去调用三次")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"⏳09-复习string类的实现过程『ing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#⏳09-复习string类的实现过程『ing"}},[this._v("#")]),this._v(" ⏳09.复习String类的实现过程『ing")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722140914805.png",alt:"image-20210722140914805"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("哈哈哈")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722140938343.png",alt:"image-20210722140938343"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("cdav磁力搜索")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141007366.png",alt:"image-20210722141007366"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("发大V啊")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141035492.png",alt:"image-20210722141035492"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("你将获得的代码")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("complex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h\ncomplex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp\n    \nstring"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("h\nstring"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cpp\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_10-扩展补充：类模板，函数模板，及其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-扩展补充：类模板，函数模板，及其他"}},[this._v("#")]),this._v(" 10.扩展补充：类模板，函数模板，及其他")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_10-1-进一步扩展static细节』⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-进一步扩展static细节』⭐️"}},[this._v("#")]),this._v(" 10.1.进一步扩展static细节』⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141202806.png",alt:"image-20210722141202806"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141225582.png",alt:"image-20210722141225582"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("class中静态的数据只有一份，所以我们什么时候，会使用这种静态的数据。\n"),s("ul",[s("li",[t._v("比如，银行的账号体系。『利率就应该设计为static』")]),t._v(" "),s("li",[t._v("『静态数据的性质和什么时候要使用它。』")])])]),t._v(" "),s("li",[t._v("什么时候要使用静态的函数呢？\n"),s("ul",[s("li",[t._v("『静态函数的特征和一般的成员函数的特征。。。差别在于静态函数没有this指针。。可见它不能够像一般的成员函数那样去取，去访问去存取去处理这些对象里面的东西，因为它没有this指针。。")]),t._v(" "),s("li",[t._v("那它做什么用？显然它——只能去存取静态的数据，，静态函数如果要去处理数据的话，它只能处理静态的数据、这是环环相扣的，我们体会一下。")])])]),t._v(" "),s("li",[t._v("所以我测试如下：")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bits/stdc++.h>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("solve")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("solve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("solve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"demodemo"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tcout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" solve"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("999")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("777")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//改成static int a=777;结果不变")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\tsolve"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("system")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pause"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n输出\ndemodemo\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("999")]),t._v("\n请按任意键继续"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("易错：")]),this._v(" "),e("p",[this._v("如果你class的数据是静态数据！！『语法上要注意』")]),this._v(" "),e("p",[this._v("你一定要在class的外头，做这样一行动作！！这杨一行动作，有的人叫设初始化，设初值。因为往往会写成这样，会给一个值。。有的人叫声明。不过严格术语来讲，这个叫作定义。。为什么呢？一般我们说，写一行下来，会造成变量获得内存，这一行叫作定义。。所以在这个类里头说。。这个变量是静态的，这个只是声明而一。因为它脱离于将来产生对象，它是属于class的。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("无论如何，我们要记下来一点：静态的数据，在类class的外头要写这样一行东西！！『如何写呢？？如黄色部分，至于要不要给定初值，都可以。。。什么鬼、？？？』『我测试了一下』")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" solve"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("777")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//改成static int a=777;结果不变")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出的999变成了0.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此外，如果不写哪一行，编译器会报错。。注意总结")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("此外：静态的函数，它没有this指针，所以它只能去处理静态的数据！！！")]),this._v(" "),e("li",[this._v("『调用static函数的方式有2种，第一种叫作通过对象！！那就和一般的成员函数一样！！『但是，这个编译器不会给我们做this指针那啥，因为只是静态』")]),this._v(" "),e("li",[e("strong",[this._v("第2种就是，我没有对象")]),this._v("，也许我的银行才开张，还没有人来开户，但是我的利率得先写』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_10-2-进一步补充ctors放在private里面-单例模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-进一步补充ctors放在private里面-单例模式"}},[this._v("#")]),this._v(" 10.2.进一步补充ctors放在private里面+单例模式")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("诉求是什么呢？就是我们写的一个class 只希望产生一个对象。")])]),t._v(" "),s("li",[s("p",[t._v("你可以去想想在现实生活中什么时候可能会用到。那那么当你需要的时候，就要像这样来做。")])]),t._v(" "),s("li",[s("p",[t._v("其实做法有不止一种，但是现在这种做法是非常好的。")])]),t._v(" "),s("li",[s("p",[t._v("但是这个写法还不是最完美，我们来检讨一下。")])]),t._v(" "),s("li",[s("p",[t._v("你虽然写好了这个a 如果外界都。")])]),t._v(" "),s("li",[s("p",[t._v("没有需要用到。")])]),t._v(" "),s("li",[s("p",[t._v("这个a 仍然存在。")])]),t._v(" "),s("li",[s("p",[t._v("这个静态的a 仍然存在，好像有点浪费。")])]),t._v(" "),s("li",[s("p",[t._v("所以"),s("strong",[t._v("更好的写法是这样子")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("这个仍然是那个对外的唯一窗口。get instance 这个函数静态的。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141337097.png",alt:"image-20210722141337097"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("下面改善")]),t._v(" "),s("li",[t._v("上一页static的a是在private里面")]),t._v(" "),s("li",[t._v("刚刚我们的例子里面这边有一个静态的自己。")]),t._v(" "),s("li",[t._v("现在不这么做了，把它放到这一个对外窗口这里头来，唯一的差别就在这里。")]),t._v(" "),s("li",[t._v("我们现在改为：放在getInstance函数里面『带来的好处，C语言中：\n"),s("ul",[s("li",[t._v("现在这一夜静态的自己是放在这个函数里头。\n这带来什么好处呢？\n那你要回想一下，在c 里面就已经存在了一个函数里面，静态的意思是什么？\n"),s("strong",[t._v("『只有』当有人调用到他。这一个东西才会出现才会诞生，才会创建。那离开这个函数之后呢，这个东西还在，这是过去c 以来就有的呃呃性质")]),t._v("。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141254648.png",alt:"image-20210722141254648"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("所以写成这样之后呢。即使没有任何人要使用。如果没有任何人要使用这个单例的话，那这个单例就不存在。")]),t._v(" "),s("li",[t._v("一旦有人用了一次，这个单例才出现。")]),t._v(" "),s("li",[t._v("并且也永远只有这一份。")]),t._v(" "),s("li",[t._v("这是"),s("strong",[t._v("非常好")]),t._v("的一个写法。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_10-3-进一步补充cout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-进一步补充cout"}},[this._v("#")]),this._v(" 10.3.进一步补充cout")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141402373.png",alt:"image-20210722141402373"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("也许你有疑惑，为什么cout可以接受各式各样的类型的数据，你可以把整数浮点数、double 值字符串。是指标都丢给谁要的，他都能够打印出来，他怎么这么厉害呢？\n是不是他对于这个output operate a 也就是小于小于这个操作服务有做了这么多的类型的重载，会不会是这样的？")]),t._v(" "),s("li",[t._v("把证据找出来。这个就是cout这是标准库里面的源代码挖出来的，这个就是cout")]),t._v(" "),s("li",[t._v("他是什么类型啊？在这里看到了这名字很长，我也不念了。"),s("code",[t._v("_IO_ostream_withassign")])]),t._v(" "),s("li",[t._v("那这个类型又是什么？我们往上看，看到他继承是ostream。")]),t._v(" "),s("li",[t._v("好，所以我们可以简单的说，cout 就是一种ostream。")]),t._v(" "),s("li",[t._v("然后我们去看o string 的定义发现：的确如我们所想象的。他做的这么多的<<的操作和重返接受哪些类型呢？这边有点点点，所以其实还没有列出完整。")]),t._v(" "),s("li",[t._v("正是因为如此，所以cout 的才能够接受那么多种不同类型的数据，而且可以把它打印出来。")]),t._v(" "),s("li",[t._v("cout的补充完毕")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_10-4-进一步补充class-template"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-进一步补充class-template"}},[this._v("#")]),this._v(" 10.4.进一步补充class template")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("完了模板是一个很大范围的东西。但是我这边用简单的两张投影片，让大家理解最精髓的部分啊，其他更延伸出去的细部就不涵盖在没有涵盖在我们这个课程里头。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141531721.png",alt:"image-20210722141531721"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("当然这里头很多小小的语法上的细节，我这里并不带到他，应该这不是没有完整涵盖在我们课程里头。")]),t._v(" "),s("li",[t._v("啊，但是精神上这样已经足够了。")]),t._v(" "),s("li",[t._v("用法是这样用。这样子其实编译器看到他会把上面这一段代码。\n把鸡全部替换为double。这样就得到了一份代码。这阴气再看到下面这一行，又把上面的题全部替换为整数，又得到一份代码。所以等于这样两个写法，使用者这么用其实是。\n两份几乎完全一样的这样的代码，只有这个t 呢不一样。")]),t._v(" "),s("li",[t._v("所以有的人会说模板会造成代码的蓬帐，指的是：我刚刚讲的这种情况，代码的膨胀。")]),t._v(" "),s("li",[t._v("但是这个膨胀是必要的呀，你就是你头像要放的是实部虚部是double 或者是不需不是整数，这就是两种情况，一定需要两份代码。")]),t._v(" "),s("li",[t._v("所以这并不是并不是缺点。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_10-5-进一步补充function-template-argument-deduction（引数推导）⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-5-进一步补充function-template-argument-deduction（引数推导）⭐️"}},[this._v("#")]),this._v(" 10.5.进一步补充function template+argument deduction（引数推导）⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("argument，引数，『就是"),e("strong",[this._v("实参")]),this._v("』啊，侯捷说的『引数推导/实参推导』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141611163.png",alt:"image-20210722141611163"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("Complex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" solve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("但是"),e("strong",[this._v("现在是function template 不必明确指出了，本来在这里要有尖括号")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("min"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("r2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t这样的尖括号不需要\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("r2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("就可以了\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("如果你有定义，我这边就通过了。")])]),t._v(" "),s("li",[s("p",[t._v("如果找不到这一个函数，那编译器边的这个地方就是说。『『我虽然帮你。找到了该调用这个函数，可是这个函数里面比大小，我不知道如何比大小。』』\n所以这是互相搭配的，这个叫函数模板。")])]),t._v(" "),s("li",[s("p",[t._v("这样的设计嗯合理吗？")])]),t._v(" "),s("li",[s("p",[t._v("其实很合理。\n比大小就是这个符号。"),s("code",[t._v("<")]),t._v("\n不管什么东西比大小都是这个符号。\n至于这个符号作用在stone身上，作用在person 人身上，作用在animal 动物身上，该怎么去比大小。\n设计这个比大小的人责任不在他身上，责任在设计stone class的这个人身上，或者是设计animal 设计person。")])]),t._v(" "),s("li",[s("p",[t._v("设计各种class 的人的身上，他才知道怎么去比大小。")])]),t._v(" "),s("li",[s("p",[t._v("所以『这样把责任分开来是非常好的』")])]),t._v(" "),s("li",[s("p",[t._v("这也就是标准库里面的作为。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"hacv疑问：类模板为什么不能自动推导数据类型？⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hacv疑问：类模板为什么不能自动推导数据类型？⭐️"}},[this._v("#")]),this._v(" HACV疑问：类模板为什么不能自动推导数据类型？⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("函数模板可以根据实参的类型推导。逻辑上无参的函数应该不需要模板类。类模板类型的自动推导，是因函数模板要编译两次，每次都会利用函数的重载生成新的函数。这些不同的函数就是根据函数的形参类型，形参个数，形参顺序确定的。所以根据实参可以推导出形参的类型，从来自动推导出函数模板的类型。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("类模板是抽象数据类型，类没有参数之说（构造函数的参数不是用于确定类的特性的参数），因此类是没有任何信息可以推导出应该定义什么类，因此必须明确的给出类型参数。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_10-6-进一步补充namespace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-6-进一步补充namespace"}},[this._v("#")]),this._v(" 10.6.进一步补充namespace")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141637856.png",alt:"image-20210722141637856"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("那么name space 到底是什么呢？\n语法是这样，这是一个关键字。\n你后面可以命一个名称，然后然后把你所有的东西都放到这里头。我们就说所有这些东西被封锁。叫封锁是太太严格了，被包装在这一个：命名空间/名字空间里头。\n所以也许在一个公司里头，你发展的一些东西，你怕跟别人同名，那同名是不可以的。\nok 你自己先写一个name space，那别人也写一个n base，这样永远不会打架。")])]),t._v(" "),s("li",[s("p",[t._v("好，那我们要怎么去用标准库里面的东西呢？")])]),t._v(" "),s("li",[s("p",[t._v("第一种做法是最简单的做法叫做"),s("code",[t._v("using directive")]),t._v(" directive，just the 命令。\n这意思就是说我现在这么写啊，我现在要使用这一个命名空间，叫s td 的这个命名空间。这种写法叫using directive。等同于你把这个整个封锁打开，全部打开。从此呢你不用再写全名了，本来在s td 里面呢，它的全名要写成这样子s。")])]),t._v(" "),s("li",[s("p",[t._v("2』或者是我要一行一行打开，因为这个标准库里面可能有可能有几千个东西，我不想一次打开，也许会造成我后面的混乱。那这一种写法叫做"),s("code",[t._v("using declaration")]),t._v("。using的声明。")]),t._v(" "),s("ul",[s("li",[t._v("他是一条一条的声明了。")])])]),t._v(" "),s("li",[s("p",[t._v("或者是你都不打算这个你就是要非常规矩的把它的每一个的全名。部的名称写出来，那就是最右边这样子。\n都没有用到using")])]),t._v(" "),s("li",[s("p",[t._v("革命尚未成功")])]),t._v(" "),s("li",[s("p",[t._v("同志仍需努力")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141703881.png",alt:"image-20210722141703881"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"『类和类之间的关系开始』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#『类和类之间的关系开始』"}},[this._v("#")]),this._v(" 『类和类之间的关系开始』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_11-组合-composition-与继承-inheritance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-组合-composition-与继承-inheritance"}},[this._v("#")]),this._v(" 11.组合(Composition)与继承(Inheritance)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("code",[this._v("Inheritance（继承）")])]),this._v(" "),e("li",[e("code",[this._v("Composition（复合）")])]),this._v(" "),e("li",[e("code",[this._v("Delegation（委托）")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141735891.png",alt:"image-20210722141735891"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("我们现在已经具备了什么样的技巧呢？")]),t._v(" "),s("li",[t._v("我们已经能够良好的写出单一的class，不管他有没有带指针，写法不一样。\n他以后不在写法会考虑不太一样，但我们都能够应付了。\n这种叫做基于对象的设计。")]),t._v(" "),s("li",[t._v("对于像复数这样的类，或者像字符串这样的类。\n他基本上也不会跟其他的class 其他的类发生发生关系。\n但是再来我们要考量的一些比较复杂的问题的时候。\n你就需要让类和类之间产生关系，这个就叫做面向对象的编程，面向对象的思想")]),t._v(" "),s("li",[t._v("所以我们首先要探讨的是类根类之间有些什么关系。\n有的书籍，有的人把这些关系呢探讨的非常的细微，简直到了"),s("strong",[t._v("人生哲学")]),t._v("的地步。『2333』")]),t._v(" "),s("li",[t._v("我认为我们只要了解这三种关系。就足够往下进行解决。所有我们想要对class和class之间让他建立关系，全部都可以做到。")]),t._v(" "),s("li",[t._v("所以我们接下去要谈的是继承、复合、委托。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_11-1-composition（复合）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-composition（复合）"}},[this._v("#")]),this._v(" 11.1.Composition（复合）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("表示has-a")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141806257.png",alt:"image-20210722141806257"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("先找最简单的来讲。composition这个术语有很多其他的名称。")])]),this._v(" "),e("li",[e("p",[this._v("那在这个课程里面，我就用composition，也就是复合。")])]),this._v(" "),e("li",[e("p",[this._v("那对于我们比较刚开始接触的人呢，看这看这样可能有点不习惯。于是我把它。\n换一个角度看画，把它替换进来啊，这个这可能替换进来就变成下面这张图。这样可能比较清楚一些。")])]),this._v(" "),e("li",[e("p",[this._v("下面是『适配器模式』")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141835854.png",alt:"image-20210722141835613"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("我有1个不一定是1啊，我有n 个也可以啊，has-a这这样的关系。")])]),t._v(" "),s("li",[s("p",[t._v("这一种关系早就存在了，在面向对象语言出现之前！！早就存在。")])]),t._v(" "),s("li",[s("p",[t._v("我们回想一下c 语言的结构：")])]),t._v(" "),s("li",[s("p",[t._v("c 的structure a little 头你就可以放里头放什么呢？放其他的结构或者放整数，放字符串，放什么什么什么，")])]),t._v(" "),s("li",[s("p",[t._v("这些都是拥有composition的概念。")])]),t._v(" "),s("li",[s("p",[t._v("所以这个早就存在了，我相信大家也很容易理解。")])]),t._v(" "),s("li",[s("p",[t._v("『核心方法』我们画成图。我们要慢慢习惯用图来表现类和类之间的关系。")])]),t._v(" "),s("li",[s("p",[t._v("尤其以后系统越来越庞大。你要用图来表现，而不是直接看源代码。当我们在做沟通的时候啊，要用图来表现。")])]),t._v(" "),s("li",[s("p",[t._v("所以大家要习惯。")])]),t._v(" "),s("li",[s("p",[t._v("我里头有其他的东西，所以我就画成菱形的黑色。黑色表示有东西。等一下会出现白色的那另外一个话题。\n所以我们一看到这个图，我们就知道他要表现的是composition")])]),t._v(" "),s("li",[s("p",[t._v("dequeue这个英语为母语的国家里头，都把这个念在dq啊，不是念dQ 这个我们要注意一下。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Composition（复合），表示has-a")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141921641.png",alt:"image-20210722141921641"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Composition（复合）关系下的构造和析构")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722141946953.png",alt:"image-20210722141946953"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("既然我拥有你。我们两个我跟你是不同的class。")]),this._v(" "),e("li",[this._v("你有你的构造函数我有我的构造函数。我也不能够越俎代庖的去，去做你你在构造函数所做的事情，我应该只关注我自己。")]),this._v(" "),e("li",[this._v("所以他们的构造函数之间。是一个什么样的关系呢？这个标题说composition 之下的构造和析构有什么关系？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"记忆『container和component』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#记忆『container和component』"}},[this._v("#")]),this._v(" 记忆『Container和Component』")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("由于是左边拥有右边，所以左边叫Container，右边是Component，Component就是元件、组件")])]),t._v(" "),s("li",[s("p",[t._v("从内存的角度画是这样。我拥有你。那我当然比较大，就画外面这个你比较小就画成小的这一个。\n构造的时候，外界要构造一个外部这个东西。")])]),t._v(" "),s("li",[s("p",[t._v("注意黄色这一段。构造一定要由内而外构造，这样才基础才稳定。这是在我们人类的的生活的理念之中也是这样，习惯也是这样，你要做一个东西，如果他有内部有外部，当然是先把理念构造好了才扎实。")])]),t._v(" "),s("li",[s("p",[t._v("所以c 加加也要表现出这种特性出来。")])]),t._v(" "),s("li",[s("p",[t._v("所以模拟出这个动作啊。我要模拟这个动作，我就说构造函数呢，我就借借用这一个特殊的这个语法构造函数，有他的初值列")])]),t._v(" "),s("li",[s("p",[t._v("红色的这个我要表现的就是外部这个构造函数去调用里面的构造函数。等到执行完了之后才做外部这个自己的事情。")])]),t._v(" "),s("li",[s("p",[t._v("这个有个先后，我要"),s("strong",[t._v("强调的就是这个先后的关系")]),t._v("。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("为的是呼应这句话。\n而这句话是我们人类经验里面觉得这样是对的。\n构造要由内而外。\n所以红色先执行。那这一段是谁做的？我们在写外部这个港片的，我们其实不管这个东西的。\n是希望c 加加语言帮我们实现这个东西。因为我们觉得这样很合理，但我们自己不去写他。所以红色这一部分。\n是『"),e("strong",[this._v("编译器帮我们加上去")]),this._v("的。』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("『这个要注意这一点』。")]),this._v(" "),e("li",[this._v("好，但是也要注意，其实这都是编译器帮我们安排好了。我们现在这里有两个class，只要各自去管各自的构造跟虚构。")]),this._v(" "),e("li",[this._v("至于这些次序呢，编译器会帮我们加嘛加代码。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"默认构造函数？？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#默认构造函数？？"}},[this._v("#")]),this._v(" 默认构造函数？？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_11-2-delegation（委托）-编程手法pimpl⭐️"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-delegation（委托）-编程手法pimpl⭐️"}},[this._v("#")]),this._v(" 11.2.Delegation（委托）+编程手法pImpl⭐️")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Handle/Body（"),e("strong",[this._v("pImpl")]),this._v("）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722140652866.png",alt:"image-20210722140652866"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("第二种关系跟composition 组合复合也脱离不了关系。这个叫Delegation（委托）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这两个class 它是用指针指过来的化身图是这样。仍然用菱形的，但是是白色的，空心的表示是指针。\n也就是说我"),e("strong",[this._v("左边仍然有一个右边，但是这个有有点虚。不是不是那么扎实，我只是有一个指针指向他")]),this._v("。\n至于什么时候才真的拥有右边，目前还不知道。只是指正，所以画图是这样。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("这样的关系我们就叫Delegation（委托）")])]),t._v(" "),s("li",[s("p",[t._v("有些江湖流派不把这样子叫做Delegation（委托），这个无所谓，只要我们双方说的清楚就好了。")])]),t._v(" "),s("li",[s("p",[t._v("委托为什么叫委托呢？我拥有这个指针指向你之后。在任何一个我想要的时间点，我就可以调用你。\n来做事情，把任务委托给你。")])]),t._v(" "),s("li",[s("p",[t._v("另外一个术语，这一个名词有另外一个术语就很好，我觉得比Delegation（委托）更好。\n叫Composition by reference。")])]),t._v(" "),s("li",[s("p",[t._v("他也是拥有，他也是有东西，只不过他有的是指针，所以叫Composition by reference。\n怎么不讲by poninetr呢？其实我们的课程以来，从前面一直以来。从来没有提过by poninetr这个术语。\n那是因为"),s("strong",[t._v("在学术界")]),t._v("里面不讲by poninetr啊，只讲by reference。\n即使你用指针在传，我们也叫做by reference。")])]),t._v(" "),s("li",[s("p",[t._v("这个就是重点啊，两个类之间什么样情况下得的可选，叫委托，就是用指针相连。\n那用指针相连的话，他们的寿命就不一致哦。")])]),t._v(" "),s("li",[s("p",[t._v("我这这个左边只是对外的接口。至于真正的实现都在右边做。当左边需要动作的时候，都调用右边的这个类的函数来服务。")])]),t._v(" "),s("li",[s("p",[t._v("永远如此，左跟右永远是这样的关系。这一种写法。非常有名，叫做Pimpl（pointer to impratation）\n我有一根指针去指向为我实现所有功能的那一个类，这个叫作pimpl")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("他为什么这么有名了？我这么强调。因为我们把所有的类如果都写成这样的话。左手边，对外不变。\n右手边是真正的实现，我们可以切换了。")]),this._v(" "),e("li",[this._v("我的意思是这个指针将来也可以去指向不同的实现类。")]),this._v(" "),e("li",[this._v("这具有一种弹性，也就是说右边这边是怎么变动都不影响，左边，也就不影响客户端。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"编译防火墙"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译防火墙"}},[this._v("#")]),this._v(" 编译防火墙")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("客户怎么看这个字符串都不受影响，那太好了。\n或者这一个手法又叫做『编译防火墙』。\n左边永远不用再定义啊，要变成只是右边而已。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("什么叫"),e("strong",[this._v("引用技术")]),this._v("呢。剂量技术计算个数，就像现在这种情况。\n有三个字符串都在用同一个hello。\n就好比你现在创建了一个字符串，内容是hello，然后你做一次copy 再做一次卡比，这样就有三个完全一样的东西。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"inheritance（继承）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inheritance（继承）"}},[this._v("#")]),this._v(" Inheritance（继承）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722120020603.png",alt:"image-20210722120020603"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[s("p",[t._v("下一个关系，第三种叫inheritance 继承。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("有的人有误解。觉得继承才是面向对象")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("其他两种，嗯太简单了，过去就有了，composition，用指针来做的composition，或者是用实际数东西来做的composition。\n太简单，以为这个才是面向对象，其实不是。\n这三种关系，都是面向对象的一部分。")])]),t._v(" "),s("li",[s("p",[t._v("我想其实我们上这个课呢，你手上一定还会有书。不可能用课程完全取代书籍。这时候你可以去查一下struct跟class 非常像。\n在哪里自己去查!")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722120020603.png",alt:"image-20210722120020603"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("这样就是一个继承的语法，那继承C++很你也可以说他设想很周到，给你三种继承方式，这是其中一种叫public。")]),t._v(" "),s("li",[t._v("在其他的语言上面，比如说"),s("strong",[t._v("java 他也有继承，他就只有public，所以他不必写")]),t._v("。")]),t._v(" "),s("li",[t._v("那C++呢除了public 继承，还有其他private 私有的继承，还有protected 的继承。啊，有三种。但是最重要的就是这种public。")]),t._v(" "),s("li",[t._v("使用public 继承就是在传达一种逻辑意义。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("这并不是继承的一个最有价值的部分。\n那他有价值的在哪里呢？是他跟虚函数搭配这个最有价值。")])]),this._v(" "),e("li",[e("p",[this._v("Inheritance（继承）关系下的构造和析构")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722120158547.png",alt:"image-20210722120158547"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("从内存的角度来看，就是子类的对象。里头有一个父类的。我喜欢用part 这个字眼——成分。\n"),e("strong",[this._v("子类的对象里面有父类的成分在里")]),this._v("头。这样的解释可能大家感觉更好成分。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("于是这又是一个。外部里头包着一个内部的一种一种状态出现。\n你回忆一下我们来回忆一下，这前面讲composition 也是这种关系。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("用代码来模拟")]),this._v("的话，就是这样子。\n子类的析构函数。\n里头先把自己的事情做完，这个点点点做完了之后才调用父类的析构函数。\n"),e("strong",[this._v("我们用这样来模拟编译器帮我们安插代码，是安插在什么位置")]),this._v("。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("请注意这边一句话。父类base class 的吸构函数必须是virtual")]),t._v(" "),s("li",[t._v("要不然的话不会有下面这个好行为，下面有什么好行为，析构要由外而内。")]),t._v(" "),s("li",[t._v("那这个原因原因讲起来比较大，比较长啊，我们现在"),s("strong",[t._v("先暂时这样理解，这个也是一个良好的编程习惯")]),t._v("。")]),t._v(" "),s("li",[t._v("只要你的class 是现在马上要让他变成一个父类，")]),t._v(" "),s("li",[t._v("或者你认为将来他会变成一个父类，你就把你的析构函数设为virtual。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("然后我们从内存的角度去探讨他在构造跟虚构的时候，这个外部内部是谁先谁后。\n这个谁谁谁，随后我们已经不必操心了，是"),e("strong",[this._v("编译器")]),this._v("已经帮我们完成了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"继承到底怎么用？搭配虚函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承到底怎么用？搭配虚函数"}},[this._v("#")]),this._v(" 继承到底怎么用？搭配虚函数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我刚刚说单纯的从内存的角度去看，刚刚的那个例子只是为了。刚刚的例子只是做什么呢？\n想要表现出子类对象比较大，因为它涵盖的父类对象里面的数据。\n"),e("strong",[this._v("但继承主要不是这个用法，要搭配虚函数。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_12-虚函数与多态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-虚函数与多态"}},[this._v("#")]),this._v(" 12.虚函数与多态")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_12-1-inheritance（继承）带有虚函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-inheritance（继承）带有虚函数"}},[this._v("#")]),this._v(" 12.1.Inheritance（继承）带有虚函数")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("但是刚刚我有提到。当我们使用继承的时候，其实我们是要搭配虚函数来使用。才会达到。最强而有力的效果。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722120239291.png",alt:"image-20210722120239291"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("虚函数是什么呢？在语法上。我们只要在任何一个『成员函数』之前，加上virtual 这个关键字。他就成为一个虚函数。\n在继承的关系里面，所有的东西都可以被继承下来。\n"),e("ul",[e("li",[this._v("数据可以被继承下来，就占用了内存的一部分。")]),this._v(" "),e("li",[this._v("函数也可以被继承下来。可是函数的继承从内存的角度怎么去理解呢？不应该从内存的角度去理解！函数的继承，继承的是调用权。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("所以父类跟此类呢子类可以调用父类的函数，这个叫继承了函数啊，其实继承的是调用权。\n所以这些所有的这是父类shape，是父类，这里面的函数子类通通可以调用。\n那子类要不要"),e("strong",[this._v("重新定义")]),this._v("呢？这就是我们现在要讨论的重点。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("non-virtual函数，你不希望子类重新定义（override，覆写）它\n"),s("ul",[s("li",[t._v("这个重新定义这一个，在现在这个主题里面有一个术语叫做override。这"),s("strong",[t._v("个术语不能随便用，这个术语一定是用在虚函数被重新定义，才能够叫override。我们叫覆写。")])])])]),t._v(" "),s("li",[t._v("virtual函数，你希望子类重新定义（override，覆写）它，且它已有默认定义")]),t._v(" "),s("li",[t._v("pure virtual函数，你希望子类一定要重新定义（override，覆写）它，你对它没有默认定义！\n"),s("ul",[s("li",[t._v("纯虚函数就是你希望子类去一定要重新定义它，不可以不定义。")]),t._v(" "),s("li",[t._v("为什么不可以不定义的，因为你现在完全没有定义。")]),t._v(" "),s("li",[t._v("注意这个位置啊，在这里等于零，那叫做纯虚函数。"),s("strong",[t._v("纯虚函数是没有定义的。其实纯虚函数可以有定义。但是在我们现在这个课程里头呢，我们就不去提他啊")]),t._v("，其实它是可以有定义的。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722120324781.png",alt:"image-20210722120324781"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_12-2-template-method（模板方法）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-2-template-method（模板方法）"}},[this._v("#")]),this._v(" 12.2.Template Method（模板方法）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722120350572.png",alt:"image-20210722120350572"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("啊，于是有人就说那。那我们来开发这种产品好了，先帮大家把这些可以写的事情先写好！\n啊，那么他就由于这个跟文件有关。好，就是他就写了一个class 叫做CDocument\nDocunment里面有一个函数叫啊OnFileOpen\n为了呼应我刚刚说，我们现在要对付的这件事情叫OnFileOpen")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("纯虚函数是子类一定要去override 去覆写")]),this._v(" "),e("li",[this._v("然后我们看怎么使用哦，这一个有一个团队他可能把这个CDocument写好了，而且他可以拿来卖钱，这一份。\n我们把它买过来之后，这一块，我们写我们的子类。\n注意这个时间点，他可能是1年前写好的，我们是现在才要写的。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("模板方法")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("Method是什么Method是java 的术语，java 语言说函数就是Method\t。\n所以其实这个就是C++里面的某一个函数。哪一个函数呢？\n就是刚刚我们讲的这一个啊OnFileOpen\n所以这一种用法你可以想象。对于一个做框架的人。\n这边出现这个字眼framework，什么叫框架呢？\n我先帮你想好了，你想设计一个应用程序，你该有哪一些功能？这些功能是差不多的。\n因为在比如说在windows 底下所有的程序呃，左边菜单拉下来应该是怎么样，他的旁边应该是怎么样。\n如果要开一个文件的话呢，应该出现一个对话框，然后应该怎么样？ 怎么样怎么样，这些都是固定的。")]),this._v(" "),e("li",[this._v("大家写程序的竞争力,啊这个。这个拼搏的部分不在于这些一般性的动作上面，而是在于你的知识领域上！！\n『所以这些一般性的动作谁来写都一样。那么就有人说来，我来帮大家把这个写好，这个叫框架，应用程序的框架。』")]),this._v(" "),e("li",[this._v("那在这种应用程序的框架里面就会『大量』的用到了这种template Method 的手法。\n也就是说，他就先把固定可以写的先写也好，留下那个它无法决定的函数呢。让他成为一个虚函数。让你的子类去定义它。\n这一种框架当然是造福人类了。有人先把我们的写的一大堆东西都先写好。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("产品")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("啊，真相大白了，this是谁？this是myDoc。myDoc就是这里啊。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722120418341.png",alt:"image-20210722120418341"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("其实这个cdocument 当成是一个产品买来的，就文档上一定要写的很清楚。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722140525675.png",alt:"image-20210722140525675"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_12-3-inheritance（继承）-composition（复合）关系下的构造和析构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-3-inheritance（继承）-composition（复合）关系下的构造和析构"}},[this._v("#")]),this._v(" 12.3.Inheritance（继承）+Composition（复合）关系下的构造和析构")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722140557393.png",alt:"image-20210722140557393"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("画成内存的角度这样。可是我应该先把父类画在上头，还是把component画在上头呢？")]),this._v(" "),e("li",[this._v("不知道。但没有关系，我们只要知道这2个存在于这个子类这边的内容物就可以了。")]),this._v(" "),e("li",[this._v("所以你可以想象，当你去创建一个这个Derived的时候。")]),this._v(" "),e("li",[this._v("『问题』它的构造函数，应该先去调用，上面这个，也去调用右边这一个，可是谁先呢？？？？\n这就是这个问号。这里的问号就是要问谁先。\n这个先后其实影响不太大，对于我们后面写程序影响不太大。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("下面这种情况呢？这也是继承加复合，这个是继承，这个是复合。\n我要回到上一页去。我现在回不去了，我看看啊。好，我用这一个。好，这个就没有疑虑了。\n为什么这一种情况是子类里头有一个父类的part。\n而父类里头父类的对象里头又有一个component 的成分在里面。所以画成图的话是子类这个最大。\n里面有父类的成分，父类理念又有这个component 的成分。\n所以他们的次序，那当然是：啊，当我要创建一个子类的时候，构造函数的次序当然是最里头的最先被调用。\n那就是先component 在base 在drive。")])]),this._v(" "),e("li",[e("p",[this._v("而虚构的时候刚好相反。\n所以下面这个问号其实应该很清楚的，不用写代码，我们也在逻辑上推导的出来。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722115547405.png",alt:"image-20210722115547405"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("好，所以。进行到这里。面向对象程序设计。我们归类为class 跟class 有三种关系，我们全部都分别的把它处理完毕了。现在我要举几个例子，把这些实际应用起来。这也就是我们整个课程的最后的一部分。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_12-4-inheritance（继承）-委托-delegation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-4-inheritance（继承）-委托-delegation"}},[this._v("#")]),this._v(" 12.4.Inheritance（继承）+委托(Delegation)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722114612912.png",alt:"image-20210722114612912"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("在这三种关系里面，最====功能最强大的是这一种『委托+继承』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722114746736.png",alt:"image-20210722114746736"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("所以这是我们追求的目标。几乎所有写UI（ user interface） 啊，使用者接口uc interface。的程序员一定会碰到这种问题，你必须去解决这种问题。")]),this._v(" "),e("li",[this._v("我们该怎么做呢？这边有一个非常经典的解法。我们设计一个class 叫subject，就是放数据，真正的Data的这里。")]),this._v(" "),e("li",[this._v("我们在设计一个class 叫observer，就是去观察他的。也就是刚刚的那个窗口，有四个窗口要去观察它。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("我们的结论是。为了解决这个observer 这种事情，我们要写左边写这么一个class，而右边要写一个。父类，是这样。\n左右是什么关系呢？对的，委托的关系，放的都是指针。\n而右边，是一个父类必须可以被派生出很多的子类出来。")])]),this._v(" "),e("li",[e("p",[this._v("继续往下讲。作为这个内容物应该提供一个『注册跟注销』的动作。你们谁想要来观察我，你们再来跟我注册啊。\n所以这边应该要提供一个函数叫attach 名字随便取啊，现在这个例子叫attach。要附着谁呢？\n附着observer 这种东西，所以这就把它放到容器里头。")])]),this._v(" "),e("li",[e("p",[this._v("这个容器现在在这里叫m_views。还应该有注销的功能，但是这里没有呈现出来。\n比如说我是设计一个电子报的人啊，我允许被登记被注册，我允许注销。还应该有一个函数叫notify。\n说什么？把所有这个观察者放在这个容器里头，所有的观察者都寻便利啊，寻访一遍，去通知他。\n那通知他这个动作要怎么完成，这就是双方左右要说好，右边要说我有一个函数叫什么，呃，叫a 好了。\n那左边说我要调用a。不过这个a 呢在工业界都把这个a 这个函数我刚刚随口说的。都把它叫做OOD\n『这个函数是这样才有意义，我要通知所有的，你们说啊准备更新数据。』\n这个就是Observer，我们现在在进行是面向对象的设计。\n而面向对象里面，我们就要考虑需要准备些哪些class 呢，能够解决某一个问题。")])]),this._v(" "),e("li",[e("p",[this._v("现在要解决。刚刚画面上的这一种问题的时候。我们思考的结果是要准备左右这两个class。\n之间要具备刚刚我所说的这些条件，这些关系就解决了这个叫面向对象设计。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("所以在谈到这个od 啊面向对象设计。啊，最经典的就是世界上有一些很好的例子，呃，很有名的就是二十三个设计模式。我们现在就拿出我就拿出最容易被理解的这个例子呢来。\n那来做解说。好，我们喘口气。接"),e("strong",[this._v("下来还要进行另外的一些很有名的设计模式")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"⏳13-委托-delegation-相关设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#⏳13-委托-delegation-相关设计"}},[this._v("#")]),this._v(" ⏳13.委托(Delegation)相关设计")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722114832031.png",alt:"image-20210722114832031"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("『体系』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722114918779.png",alt:"image-20210722114918779"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("当然每一个设计模式里面还有很细微的部分我们也并没有去提，他主要就是让大家了解怎么去组织你的类，用现实生活、现实意义的问题来做引导。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"『3分钟』"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#『3分钟』"}},[this._v("#")]),this._v(" 『3分钟』")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_13-1-prototype（原型模式）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-1-prototype（原型模式）"}},[this._v("#")]),this._v(" 13.1.Prototype（原型模式）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722114955092.png",alt:"image-20210722114955092"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("『记忆记忆』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722115035422.png",alt:"image-20210722115035422"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("『记忆一下』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722115249951.png",alt:"image-20210722115249951"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("『记忆这个』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210722115337016.png",alt:"image-20210722115337016"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("课程结束")])])}],!1,null,null,null);e.default=i.exports}}]);