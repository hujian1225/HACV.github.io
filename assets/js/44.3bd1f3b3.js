(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{217:function(t,e,_){"use strict";_.r(e);var s=_(0),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),_("ul",[_("li",[_("p",[t._v("不是所有的语言都适合进行自动垃圾回收。为了使垃圾回收器能够工作，他必选知道任何给定的数据元素或一个元素的分量是否为「或可否被用作」一个指向某块已分配存储空间的指针。")]),t._v(" "),_("ul",[_("li",[t._v("在一种语言中，如果"),_("strong",[t._v("任何数据分量")]),t._v("的"),_("strong",[t._v("类型")]),t._v("都是可确定的，那么这种语言就称为**类型安全（typesafe）**的。\n"),_("ul",[_("li",[t._v("对于某些类型安全的语言，比如ML，我们"),_("font",{staticStyle:{background:"yellow"}},[t._v("可以在「编译时刻」确定")]),t._v("数据的类型。")],1),t._v(" "),_("li",[t._v("另外一些类型安全语言，比如"),_("font",{staticStyle:{background:"pink"}},[t._v("Java")]),t._v("，其类型"),_("font",{staticStyle:{background:"yellow"}},[t._v("不能在「编译时刻」确定")]),t._v("，但是"),_("font",{staticStyle:{background:"yellow"}},[t._v("可以在「运行时刻」确定")]),t._v("。「这个称为：**动态类型（dynamically typed）**语言」")],1)])])])])]),t._v(" "),t._m(14),t._v(" "),_("ul",[_("li",[t._v("类型安全的语言，不适合使用自动垃圾回收机制。\n"),_("ul",[_("li",[t._v("遗憾的是，有些最重要语言却是"),_("strong",[t._v("类型不安全")]),t._v("的，比如"),_("font",{staticStyle:{background:"pink"}},[t._v("C和C++")])],1),t._v(" "),t._m(15),t._v(" "),t._m(16)])]),t._v(" "),t._m(17)])])}),[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"_01-语言分类方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_01-语言分类方法"}},[this._v("#")]),this._v(" 01.语言分类方法")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('<font style="background:yellow">\n')])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_01-动态-静态语言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_01-动态-静态语言"}},[this._v("#")]),this._v(" 01.动态/静态语言")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("动态语言")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("是一类在"),e("strong",[this._v("运行")]),this._v("时可以改变其结构的语言:例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[t._v("主要动态语言:"),_("code",[t._v("Object-C")]),t._v("、"),_("code",[t._v("C#")]),t._v("、"),_("code",[t._v("JavaScript")]),t._v("、"),_("code",[t._v("PHP")]),t._v("、"),_("code",[t._v("Python")]),t._v("等。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("静态语言")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("与动态语言相对应的，运行时结构不可变的语言就是静态语言。如"),_("code",[t._v("Java")]),t._v("、"),_("code",[t._v("C")]),t._v("、"),_("code",[t._v("C++")]),t._v("。\nJava不是动态语言，但Java可以称之为“"),_("strong",[t._v("准动态语言")]),t._v("”。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活!")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_02-强类型-弱类型语言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_02-强类型-弱类型语言"}},[this._v("#")]),this._v(" 02.强类型/弱类型语言")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("强类型语言？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("弱类型语言？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_03-判断：类型安全语言？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_03-判断：类型安全语言？"}},[this._v("#")]),this._v(" 03.判断：类型安全语言？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("参考自《编译原理》，“龙书”第2版，P300")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("如果一个语言"),e("strong",[this._v("既不是：静态类型安全的")]),this._v("，"),e("strong",[this._v("也不是：动态类型安全的")]),this._v("，他就被称为不安全的（unsafe）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("在不安全语言中，存储地址可以进行任意操作：可以将任意的算术运算应用于指针，创建出一个新的指针，并且"),e("strong",[this._v("任何整数都可以被强制转化为指针")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("因此"),e("strong",[this._v("从理论上")]),this._v("来说：一个程序可以在任何时候引用内存中的任何位置！这样，没有哪个内存位置可能被认为是不可访问的，也就无法安全地收回任何存储空间。\n"),e("ul",[e("li",[this._v("但是，在实践中，大部分C和C++程序并没有随意地生成指针。因此人们开发了一个在理论上不正确，但是实践经验表明很有效的垃圾回收器。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("在C++中允许不同类型指针之间进行强制转换（"),e("code",[this._v("C#")]),this._v("是类型安全的）")])}],!1,null,null,null);e.default=i.exports}}]);