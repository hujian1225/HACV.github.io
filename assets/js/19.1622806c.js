(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{189:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._m(2),t._v(" "),a("p",[t._v("[TOC]")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),a("p",[t._v("有人的讲解不错：")]),t._v(" "),t._m(6),t._v(" "),a("p",[t._v("指针步长的核心经验")]),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),a("ul",[t._m(11),t._v(" "),a("li",[a("strong",[t._v("底层")]),t._v("const『low-level const』：表示"),a("font",{staticStyle:{background:"yellow"}},[t._v("『指针指向的对象』")]),t._v("是个常量")],1)]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),a("ul",[a("li",[t._v("参考："),a("a",{attrs:{href:"http://c.biancheng.net/view/1476.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("C语言中文网"),a("OutboundLink")],1),t._v("，说法和下面一致")])]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._m(18),t._v(" "),a("blockquote",[a("p",[t._v("核心："),a("font",{staticStyle:{background:"yellow"}},[t._v("搞清楚，『指针本身』和『指针指向的对象』")])],1)]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),a("ul",[a("li",[t._v("A：由于数组名，它的指向不能变，转换过来的意思是："),a("font",{staticStyle:{background:"yellow"}},[t._v("『指针本身不可变』")])],1),t._v(" "),a("li",[t._v("所以是『指针常量』")])]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),a("ul",[a("li",[a("font",{staticStyle:{background:"yellow"}},[t._v(" 从变量名处起,根据运算符优先级结合,一步一步分析.")])],1)]),t._v(" "),a("p",[t._v("下面让我们先从简单的类型开始慢慢分析吧:")]),t._v(" "),a("ul",[t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),a("li",[a("code",[t._v("int *(*p(int))[3];")]),t._v("『"),a("font",{staticStyle:{background:"yellow"}},[t._v("//可以先跳过,不看这个类型,过于复杂")]),t._v("』\n"),t._m(38)],1)]),t._v(" "),a("p",[t._v("说到这里也就差不多了,我们的任务也就这么多,理解了这几个类型, 其它的类型对我们来说也是小菜了,不过我们一般不会用太复杂的类型,那样会大大减小程序的可读性,请慎用,这上面的几种类型已经足够我们用 了.")]),t._v(" "),t._m(39),t._v(" "),a("p",[t._v("指针是一个特殊的变量，它里面存储的数值被解释成为内存里的一个地址。要搞清一个指针需要搞清指针的四方面的内容：")]),t._v(" "),t._m(40),t._v(" "),a("p",[t._v("让我们分别说明。 先声明几个指针放着做例子：")]),t._v(" "),a("p",[t._v("例一：")]),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),a("p",[t._v("从语法的角度看，"),a("font",{staticStyle:{background:"yellow"}},[t._v("你只要把指针声明语句里的指针名字去掉，剩下的部分就是这个指针的类型。")]),t._v("这是指针本身所具有的类型。让我们看看例一中各 个指针的类型：")],1),t._v(" "),t._m(43),t._v(" "),a("p",[t._v("怎么样？找出指针的类型的方法是不是很简单？")]),t._v(" "),t._m(44),t._v(" "),a("p",[t._v("​\t当你通过指针来访问指针所指向的内存区时，指针所指向的类型决定了编译器将把那片内存区里的内容当做什么来看待。")]),t._v(" "),a("p",[t._v("​\t从语法上看，你只须"),a("font",{staticStyle:{background:"yellow"}},[t._v("把指针声明语句中的指针名字和名字左边的指针声明符"),a("code",[t._v("*")]),t._v("去掉，剩下的就是指针所指向的类型。")])],1),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),t._m(45),t._v(" "),a("p",[t._v("重点来了：")]),t._v(" "),a("ul",[a("li",[a("font",{staticStyle:{background:"yellow"}},[t._v("在指针的"),a("strong",[t._v("算术运算")]),t._v("中，指针所指向的类型有很大的作用。『注： 指针的『"),a("strong",[t._v("步长")]),t._v("』』")])],1),t._v(" "),a("li",[t._v("指针的类型(即指针本身的类型)和指针所指向的类型是两个概念。")])]),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),a("p",[t._v("指针的值是指针本身存储的数值，这个值将被编译器当作一个地址，而 不是一个一般的数值。")]),t._v(" "),a("ul",[t._m(48),t._v(" "),a("li",[a("p",[a("font",{staticStyle:{background:"yellow"}},[t._v("『指针所指向的内存区』就是从"),a("strong",[t._v("指针的值")]),t._v("所代表的那个内存地址"),a("strong",[t._v("开始")]),t._v("，长度为**sizeof(指针所指向的类型)**的一片内存区。")])],1)]),t._v(" "),t._m(49),t._v(" "),a("li",[a("p",[a("font",{staticStyle:{background:"yellow"}},[t._v("『"),a("strong",[t._v("指针所指向的内存区")]),t._v("』和『"),a("strong",[t._v("指针所指向的类型")]),t._v("』是两个完全不同的概念。")])],1)]),t._v(" "),a("li",[a("p",[a("strong",[t._v("易错点")]),t._v("："),a("font",{staticStyle:{background:"yellow"}},[t._v("在例一中，指针所指向的类型已经有了，但由于"),a("strong",[t._v("指针还未初始化")]),t._v("，所以它所指向的内存区是不存在的，或者说是"),a("strong",[t._v("无意义")]),t._v("的。")])],1)])]),t._v(" "),a("p",[t._v("以后，每遇到一个指针，都应该问问：")]),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),a("p",[t._v("指针本身占了多大的内存？")]),t._v(" "),a("p",[t._v("你只要用函数sizeof(指针的类型)测一下就知道了。在 32 位平台里，指针本身占据了 4 个字节的长度")]),t._v(" "),a("ul",[a("li",[a("font",{staticStyle:{background:"yellow"}},[t._v("指针本身占据的内存这个概念在判断一个"),a("strong",[t._v("指针表达式")]),t._v("（后面会解释）是否是"),a("strong",[t._v("左值")]),t._v("时很有用。")])],1)]),t._v(" "),t._m(52),t._v(" "),a("ul",[a("li",[t._v("指针可以加上或减去一个整数。")]),t._v(" "),a("li",[a("font",{staticStyle:{background:"yellow"}},[t._v("指针的这种运算的意义"),a("strong",[t._v("和通常的数值的加减运算的意义是不一样")]),t._v("的，以"),a("strong",[t._v("单元")]),t._v("为单位")])],1)]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("p",[t._v("例二：")]),t._v(" "),t._m(53),t._m(54),t._v(" "),a("ul",[a("li",[t._v("接下来的"),a("font",{staticStyle:{background:"yellow"}},[t._v("第 3 句中，指针ptr被加了1，编译器是这样处理的：它把指针 ptr 的值加上了"),a("code",[t._v("sizeof(int)")]),t._v("，在 32 位程序中，是被加上了 4，因为在 32 位程序中，int 占 4 个字节。")]),t._v("由于地址是用字节做单位的， 故 ptr 所指向的地址由原来的变量 a 的地址向高地址方向增加了 4 个字节。 由于 char 类型的长度是一个字节，所以，原来 ptr 是指向数组 a 的第 0 号 单元开始的四个字节，此时指向了数组 a 中从第 4 号单元开始的四个字节。")],1),t._v(" "),a("li",[t._v("我们可以用一个指针和一个循环来遍历一个数组，看例子：")])]),t._v(" "),a("p",[t._v("例三：")]),t._v(" "),t._m(55),t._m(56),t._v(" "),a("p",[t._v("再看例子：")]),t._v(" "),a("p",[t._v("例四：")]),t._v(" "),t._m(57),t._m(58),t._v(" "),a("p",[t._v("由于地址 的单位是字节，故现在的 ptr 所指向的地址比起加 5 后的 ptr 所指向的地址 来说，向高地址方向移动了 20 个字节。在这个例子中，没加 5 前的 ptr 指 向数组 a 的第 0 号单元开始的四个字节，加 5 后，ptr 已经指向了数组 a 的 合法范围之外了。虽然这种情况在应用上会出问题，但在语法上却是可以的。 这也体现出了指针的灵活性。")]),t._v(" "),a("p",[t._v("如果上例中，ptr 是被减去 5，那么处理过程大同小异，只不过 ptr 的 值是被减去 5 乘 sizeof(int)，新的 ptr 指向的地址将比原来的 ptr 所指向 的地址向低地址方向移动了 20 个字节。")]),t._v(" "),a("p",[t._v("下面请允许我再举一个例子:(一个误区)")]),t._v(" "),a("p",[t._v("例五：")]),t._v(" "),t._m(59),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),a("p",[t._v("例六：")]),t._v(" "),t._m(64),t._m(65),t._v(" "),a("ul",[a("li",[a("font",{staticStyle:{background:"yellow"}},[t._v("一个"),a("strong",[t._v("表达式的结果")]),t._v("如果是一个指针，那么这个表达式就叫"),a("strong",[t._v("指针表达式")]),t._v("。 ")])],1)]),t._v(" "),a("p",[t._v("下面是一些指针表达式的例子：")]),t._v(" "),a("p",[t._v("例七：")]),t._v(" "),t._m(66),a("p",[t._v("例八：")]),t._v(" "),t._m(67),a("ul",[t._m(68),t._v(" "),a("li",[a("p",[t._v("好了，"),a("font",{staticStyle:{background:"yellow"}},[t._v("当一个指针表达式的结果指针"),a("strong",[t._v("已经明确地具有了指针自身占据的内存")]),t._v("的话，这个指针表达式就是一个"),a("strong",[t._v("左值")]),t._v("，否则就不是一个左值。")])],1)]),t._v(" "),t._m(69),t._v(" "),a("li",[a("p",[a("code",[t._v("&a")]),t._v("不是一个左值，因为它"),a("strong",[t._v("还没有占据明确的内存")]),t._v("。"),a("font",{staticStyle:{background:"yellow"}},[t._v("『很重要的，因为a仅仅是声明，没有被定义？？是这个原因吗？我的疑问2021.7HACV』")])],1)]),t._v(" "),t._m(70)]),t._v(" "),t._m(71),t._v(" "),a("p",[t._v("数组的数组名其实可以看作一个指针。看下例：")]),t._v(" "),a("p",[t._v("例九：")]),t._v(" "),t._m(72),t._m(73),t._v(" "),a("p",[t._v("例十：")]),t._v(" "),t._m(74),t._m(75),t._v(" "),t._m(76),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),a("p",[t._v("下面总结一下数组的数组名(数组中储存的也是数组)的问题:")]),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),a("p",[a("font",{staticStyle:{background:"yellow"}},[t._v("在不同的表达式中数组名 array 可以扮演不同的角色。")])],1),t._v(" "),t._m(82),t._v(" "),a("p",[t._v("例十一：")]),t._v(" "),t._m(83),t._m(84),t._v(" "),a("ul",[t._m(85),t._v(" "),a("li",[a("p",[t._v("本节中提到了函数 sizeof()，那么我来问一问，"),a("font",{staticStyle:{background:"yellow"}},[a("code",[t._v("sizeof(指针名称)")]),t._v("测出的究竟是"),a("strong",[t._v("指针自身类型的大小")]),t._v("呢还是指针所指向的类型的大小？ 答案是"),a("strong",[t._v("前者")]),t._v("。")])],1)])]),t._v(" "),a("p",[t._v("例如")]),t._v(" "),t._m(86),a("p",[a("font",{staticStyle:{background:"yellow"}},[t._v("实际上，"),a("code",[t._v("sizeof(对象)")]),t._v("测出的都是"),a("strong",[t._v("对象自身的类型的大小")]),t._v("，而不是别的什么类型的大小。『让我联想到了C++中sizeof引用的假象！！』")])],1),t._v(" "),t._m(87),t._v(" "),t._m(88),t._v(" "),a("p",[t._v("例12：")]),t._v(" "),t._m(89),a("p",[t._v("请问怎样通过指针 ptr 来访问 ss 的三个成员变量？")]),t._v(" "),t._m(90),t._v(" "),t._m(91),a("p",[t._v("又请问怎样通过指针 pstr 来访问 ss 的三个成员变量？\n答案：")]),t._v(" "),t._m(92),t._m(93),t._v(" "),a("p",[t._v("例13：")]),t._v(" "),t._m(94),a("p",[t._v("从格式上看倒是与通过指针访问结构成员的不正规方法的格式一样。")]),t._v(" "),a("p",[t._v("所有的 C/C++编译器在排列数组的单元时，总是把各个数组单元存放在连续的存储区里，单元和单元之间没有空隙。")]),t._v(" "),a("ul",[a("li",[a("font",{staticStyle:{background:"yellow"}},[t._v("但在存放结构对象的各个成员时，在某种"),a("strong",[t._v("编译环境")]),t._v('下，可能会需要字对齐或双字对齐或者是别的什么对齐，需要在相邻两个成员之间加若干个"'),a("strong",[t._v("填充字节")]),t._v('"，这就导致各个成员之间可能会有若干个字节的空隙。')])],1)]),t._v(" "),t._m(95),t._v(" "),t._m(96),t._v(" "),t._m(97),t._v(" "),t._m(98),t._m(99),t._v(" "),a("p",[t._v("例14：")]),t._v(" "),t._m(100),a("p",[t._v("这个例子中的函数fun统计一个字符串中各个字符的ASCII码值之和。")]),t._v(" "),a("p",[t._v("前面说了，数组的名字也是一个指针。在函数调用中，当把 str 作为实参传递给形参 s 后，实际是把 str 的值传递给了 s，s 所指向的 地址就和 str 所指向的地址一致，但是 str 和 s 各自占用各自的存储空 间。在函数体内对 s 进行自加 1 运算，并不意味着同时对 str 进行了自加1运算。")]),t._v(" "),t._m(101),t._v(" "),a("ul",[a("li",[a("font",{staticStyle:{background:"yellow"}},[t._v("当我们初始化一个指针或给一个指针赋值时，赋值号的左边是一个指针，赋值号的"),a("strong",[t._v("右边")]),t._v("是一个"),a("strong",[t._v("指针表达式")]),t._v("。")])],1),t._v(" "),a("li",[t._v("在我们前面所举的例子中，绝大多数情况下，指针的类型和指针表达式的类型是一样的，指针所指向的 类型和指针表达式所指向的类型是一样的。")])]),t._v(" "),a("p",[t._v("例15：")]),t._v(" "),t._m(102),t._m(103),t._v(" "),t._m(104),t._v(" "),t._m(105),t._v(" "),t._m(106),t._v(" "),a("p",[t._v("如果有一个指针 p，我们需要把它的类型和所指向的类型改为")]),t._v(" "),a("p",[a("code",[t._v("TYEP *TYPE，那么语法格式是：(TYPE *)p;")]),t._v("\n这样强制类型转换的结果是一个新指针，该新指针的类型是"),a("code",[t._v("TYPE *")]),t._v("，它指向的类型是 TYPE，它指向的地址就是原指针指向的地址。 而"),a("font",{staticStyle:{background:"yellow"}},[t._v("原来的指针 p 的一切属性都没有被修改。（切记）")])],1),t._v(" "),t._m(107),t._v(" "),a("p",[t._v("例16：")]),t._v(" "),t._m(108),a("p",[t._v("注意这是一个 32 位程序，故 int 类型占了四个字节，char 类型占一个字节。函数 fun 的作用是把一个整数的四个字节的顺序来个颠倒。")]),t._v(" "),t._m(109),t._v(" "),t._m(110),t._v(" "),a("ul",[a("li",[t._v("我们已经知道，指针的值就是指针指向的地址，在 32 位程序中， 指针的值其实是一个 32 位整数。"),a("font",{staticStyle:{background:"yellow"}},[t._v("那可不可以把一个整数当作指针的值 直接赋给指针呢？")]),t._v("就象下面的语句：")],1)]),t._v(" "),t._m(111),t._m(112),t._v(" "),t._m(113),t._m(114),t._v(" "),t._m(115),t._v(" "),a("p",[t._v("例17：")]),t._v(" "),t._m(116),t._m(117),t._v(" "),t._m(118),t._v(" "),a("p",[t._v("看下面的例子：")]),t._v(" "),a("p",[t._v("例十八：")]),t._v(" "),t._m(119),t._m(120),t._v(" "),t._m(121),t._v(" "),t._m(122),a("p",[t._v("​\t该例子完全可以通过编译，并能执行。但是看到没有？第 3 句对指针 ptr 进行自加 1 运算后，ptr 指向了和整形变量 a 相邻的高地址方向的一块存储区。这块存储区里是什么？我们不知道。有可能它是一个非 常重要的数据，甚至可能是一条代码。而第 4 句竟然往这片存储区里写 入一个数据！这是严重的错误。")]),t._v(" "),a("ul",[t._m(123),t._v(" "),a("li",[t._v("在指针的"),a("strong",[t._v("强制类型转换")]),t._v("："),a("code",[t._v("ptr1=(TYPE *)ptr2")]),t._v("中\n"),a("ul",[a("li",[t._v("如果"),a("code",[t._v("sizeof(ptr2 的类型)大于 sizeof(ptr1 的类型)")]),t._v("，那么在使用指针 ptr1 来访问 ptr2 所 指 向 的 存 储 区时是 "),a("strong",[t._v("安 全")]),t._v(" 的 。 "),a("font",{staticStyle:{background:"yellow"}},[t._v("『HACV，觉得不仅仅是>而是>=』")])],1),t._v(" "),t._m(124),t._v(" "),a("li",[t._v("至于为什么，读者结合例十八来想一想，应该会明白的。")])])])]),t._v(" "),t._m(125),t._v(" "),t._m(126)])}),[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"c语言指针详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c语言指针详解"}},[this._v("#")]),this._v(" C语言指针详解")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('<font style="background:yellow">\n')])]),this._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[this._v("1")]),s("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"📑目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#📑目录"}},[this._v("#")]),this._v(" 📑目录")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_01-指针的几个『核心概念』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01-指针的几个『核心概念』"}},[this._v("#")]),this._v(" 01.指针的几个『核心概念』")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("指针的类型『用途：如malloc前的强制类型转换』")]),t._v(" "),a("li",[t._v("指针所指向的类型")]),t._v(" "),a("li",[t._v("指针所指向的内存区")]),t._v(" "),a("li",[t._v("指针的『"),a("strong",[t._v("步长")]),t._v("』")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bits/stdc++.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("指针的步长与指针的类型相关")]),this._v("，由于p为int型指针，故"),s("code",[this._v("p+i表示跳过i个int长度；")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" aa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//aa是个int * const aaPtr= &aa[0];")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//aa是个本身不能变的（也就是指向不能变）的指针，但是指向的对象它本身可变")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//『+1』的步长是一个int『4字节』")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("aa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//类型是下面的，数组指针")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//『+1』的步长是5个int『20个字节』")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("aa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_02-指针常量和常量指针和顶层-底层const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_02-指针常量和常量指针和顶层-底层const"}},[this._v("#")]),this._v(" 02."),s("code",[this._v("指针常量")]),this._v("和"),s("code",[this._v("常量指针")]),this._v("和"),s("code",[this._v("顶层/底层const")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_2-1-c-primer中有顶层-底层const说法✔️"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-c-primer中有顶层-底层const说法✔️"}},[this._v("#")]),this._v(" 2.1.C++primer中有"),s("code",[this._v("顶层/底层const")]),this._v("说法✔️")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("《C++ Primer》")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("strong",[this._v("顶层")]),this._v("const『top-level const』：表示"),s("code",[this._v("指针本身")]),this._v("是个常量")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("记忆方式：")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("顶层const可以表示"),s("strong",[this._v("任意的对象")]),this._v("是常量，这1点对任何数据类型都适用")]),this._v(" "),s("li",[this._v("底层const则与『指针』和『引用』等复合类型的基本类型部分有关。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_2-2-指针常量和常量指针『说法好像是民科』✔️"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-指针常量和常量指针『说法好像是民科』✔️"}},[this._v("#")]),this._v(" 2.2.指针常量和常量指针『说法好像是民科』✔️")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("语文：常量指针和指针常量")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、看见"),a("code",[t._v("const")]),t._v("读作『常量』")]),t._v(" "),a("li",[t._v("2、看见"),a("code",[t._v("*")]),t._v("读作『指针』")]),t._v(" "),a("li",[t._v("3、以"),a("code",[t._v("*")]),t._v("为界限，const放左边和右边，『可以读出2种方式』")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" p1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量指针")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" p2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//常量指针『和上面等价』")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p3"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指针常量，显然是『顶层const』")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("常量指针和指针常量的语文意义：")]),t._v(" "),a("li",[t._v("前面的是『形容词』，后边的是『名词』\n"),a("ul",[a("li",[t._v("常量指针：本质是指针，只不过是常量指针，表示指针"),a("code",[t._v("所指的对象")]),t._v("是个常量")]),t._v(" "),a("li",[t._v("指针常量：本质是常量，只不过是指针常量，表示"),a("code",[t._v("指针本身")]),t._v("不能变，也就是『指向』不能变")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("记忆方式：")]),this._v(" "),s("ul",[s("li",[this._v("常量指针：本质是指针，形容词是『常量』，表示『指针指向的对象』不能变")]),this._v(" "),s("li",[this._v("指针常量：本质是常量，形容词是『指针』，表示『指针本身』不能变")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("Q：数组的『数组名』是常量指针还是指针常量呢？")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"✅核心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#✅核心"}},[this._v("#")]),this._v(" ✅核心")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("✅转载和修订《指针详解》")]),this._v(" "),s("li",[this._v("参考自：公众号『C语言与程序设计』——关于指针，你想要的都在这里了")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"前言：复杂类型说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言：复杂类型说明"}},[this._v("#")]),this._v(" 前言：复杂类型说明")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"t-1-指针相关优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#t-1-指针相关优先级"}},[this._v("#")]),this._v(" t.1.指针相关优先级")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("运算符\t\t\t\t结合性\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  \t\t\t从左边到右边\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),t._v("  \t从右边到左边\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"t2-目前考过本部分知识的公司"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#t2-目前考过本部分知识的公司"}},[this._v("#")]),this._v(" t2.目前考过本部分知识的公司")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("来自牛客网数据")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("恒生电子")]),this._v(" "),s("li",[this._v("深信服")]),this._v(" "),s("li",[this._v("4399")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("要了解指针,多多少少会出现一些比较复杂的类型,所以我先介绍一下"),s("strong",[this._v("如何 完全理解一个复杂类型")]),this._v(",要理解复杂类型其实很简单,一个类型里会出现很多运 算符,他们也像普通的表达式一样,有"),s("strong",[this._v("优先级")]),this._v(",其优先级和运算优先级一样,所以 我总结了一下其原则:")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("code",[this._v("int p;")]),this._v(" //这是一个普通的整型变量")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("li",[a("code",[t._v("int *p;")]),t._v(" "),a("ul",[a("li",[t._v("//首先从 P 处开始,先与"),a("code",[t._v("*")]),t._v("结合,所以说明 P 是一个指针,")]),t._v(" "),a("li",[t._v("然后再与 "),a("code",[t._v("int")]),t._v(" 结合,说明指针所指向的内容的类型为 int 型.所以 P 是一个返回整型数据的指针")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("li",[a("code",[t._v("int p[3];")]),t._v(" "),a("ul",[a("li",[t._v("//首先从 P 处开始,先与"),a("code",[t._v("[]")]),t._v("结合,说明 P 是一个数组,")]),t._v(" "),a("li",[t._v("然后 与 "),a("code",[t._v("int")]),t._v(" 结合,说明数组里的元素是整型的,所以 P 是一个 由整型数据组成的数组")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("li",[a("code",[t._v("int *p[3]")]),t._v(" "),a("ul",[a("li",[t._v("//首先从宏观P开始，先与"),a("code",[t._v("[]")]),t._v("结合，因为其优先级比"),a("code",[t._v("*")]),t._v("高,所以 P 是一个数组,")]),t._v(" "),a("li",[t._v("然后再与"),a("code",[t._v("*")]),t._v("结合,说明数组里的元素是指针类型,")]),t._v(" "),a("li",[t._v("然后再与 "),a("code",[t._v("int")]),t._v(" 结合,说明指针所指向的内容的类型是整型的,")]),t._v(" "),a("li",[t._v("所以P 是一个由返回整型数据的指针所组成的数组")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("li",[a("code",[t._v("int (*p)[3];")]),t._v(" "),a("ul",[a("li",[t._v("//首先从 P 处开始,先与"),a("code",[t._v("*")]),t._v("结合,说明 P 是一个指针")]),t._v(" "),a("li",[t._v("然后再与"),a("code",[t._v("[]")]),t._v('结合(与"()"这步可以忽略,只是为了改变优先级),说明指针所指向的内容是一个数组,')]),t._v(" "),a("li",[t._v("然后再与"),a("code",[t._v("int")]),t._v("结合,说明 数组里的元素是整型的.所以 P 是一个指向由整型数据组 成的数组的指针")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("li",[a("code",[t._v("int **p;")]),t._v(" "),a("ul",[a("li",[t._v("//首先从P开始,先与"),a("code",[t._v("*")]),t._v("结合,说是 P 是一个指针,")]),t._v(" "),a("li",[t._v("然后再与"),a("code",[t._v("*")]),t._v("结合,说明指针所指向的元素是指针,")]),t._v(" "),a("li",[t._v("然后再与"),a("code",[t._v("int")]),t._v("结合,说 明该指针所指向的元素是整型数据.")]),t._v(" "),a("li",[t._v("由于二级指针以及更高级的指针极少用在复杂的类型中,所以后面更复杂的类型我 们就不考虑多级指针了,最多只考虑一级指针.")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("li",[a("code",[t._v("int p(int);")]),t._v(" "),a("ul",[a("li",[t._v("//从 P 处起,先与"),a("code",[t._v("（）")]),t._v("结合,说明 P 是一个函数,")]),t._v(" "),a("li",[t._v("然后进入（） 里分析,说明该函数有一个整型变量的参数")]),t._v(" "),a("li",[t._v("然后再与外面的 int 结合,说明函数的返回值是一个整型数据。")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("li",[a("code",[t._v("int (*p)(int);")]),t._v(" "),a("ul",[a("li",[t._v("//从P 处开始,先与指针结合,说明 P 是一个指针,")]),t._v(" "),a("li",[t._v("然后与"),a("code",[t._v("()")]),t._v("结合,说明指针指向的是一个函数,")]),t._v(" "),a("li",[t._v("然后再与()里的int 结合,说明函数有一个 int 型的参数,")]),t._v(" "),a("li",[t._v("再与最外层的int 结 合,说明函数的返回类型是整型,所以 P 是一个指向有一个 整型参数且返回类型为整型的函数的指针")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("//从 P 开始,先与"),a("code",[t._v("()")]),t._v("结合,说明 P 是一个函数,")]),t._v(" "),a("li",[t._v("然后进入()里 面,与 int 结合,说明函数有一个整型变量参数,")]),t._v(" "),a("li",[t._v("然后再与外面 的"),a("code",[t._v("*")]),t._v("结合,说明函数返回的是一个指针,")]),t._v(" "),a("li",[t._v("然后到最外面一层,先与"),a("code",[t._v("[]")]),t._v("结合,说明返回的指针指向的是一个数组,")]),t._v(" "),a("li",[t._v("然后再与"),a("code",[t._v("*")]),t._v("结合,说明数组里的元素是指针,")]),t._v(" "),a("li",[t._v("然后再与 "),a("code",[t._v("int")]),t._v(" 结合,说明指针指向的内容是整型数据.所以 P 是一个参数为一个整数据且返回 一个指向由整型指针变量组成的数组的指针变量的函数.")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_01-细说指针"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01-细说指针"}},[this._v("#")]),this._v(" 01.细说指针")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("指针的类型")]),this._v(" "),s("li",[this._v("指针所指向的类型")]),this._v(" "),s("li",[this._v("指针的值或者叫指针所指向的内存区")]),this._v(" "),s("li",[this._v("指针本身所占据的内存区")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("p",[t._v("(1)"),a("code",[t._v("int * ptr")])])]),t._v(" "),a("li",[a("p",[t._v("(2)"),a("code",[t._v("char * ptr;")])])]),t._v(" "),a("li",[a("p",[t._v("(3)"),a("code",[t._v("int * * ptr;")])])]),t._v(" "),a("li",[a("p",[t._v("(4)"),a("code",[t._v("int(*ptr)[3];")])])]),t._v(" "),a("li",[a("p",[t._v("(5)"),a("code",[t._v("int*(*ptr)[4];")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1-1-指针的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-指针的类型"}},[this._v("#")]),this._v(" 1.1.指针的类型")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("p",[t._v("(1)"),a("code",[t._v("int * ptr; //指针的类型是 int*")])])]),t._v(" "),a("li",[a("p",[t._v("(2)"),a("code",[t._v("char * ptr; //指针的类型是 char*")])])]),t._v(" "),a("li",[a("p",[t._v("(3)"),a("code",[t._v("int * * ptr; //指针的类型是 int**")])])]),t._v(" "),a("li",[a("p",[t._v("(4)"),a("code",[t._v("int(*ptr)[3]; //指针的类型是 int(*)[3]")])])]),t._v(" "),a("li",[a("p",[t._v("(5)"),a("code",[t._v("int*(*ptr)[4]; //指针的类型是 int*(*)[4]")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1-2-指针所指向的类型『和步长有关』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-指针所指向的类型『和步长有关』"}},[this._v("#")]),this._v(" 1.2.指针所指向的类型『和步长有关』")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("p",[t._v("(1)"),a("code",[t._v("int * ptr; //指针所指向的类型是int")])])]),t._v(" "),a("li",[a("p",[t._v("(2)"),a("code",[t._v("char * ptr; //指针所指向的类型是char *")])])]),t._v(" "),a("li",[a("p",[t._v("(3)"),a("code",[t._v("int * * ptr; //指针所指向的类型是int *")])])]),t._v(" "),a("li",[a("p",[t._v("(4)"),a("code",[t._v("int(*ptr)[3]; //指针所指向的类型是int ()[3]")])])]),t._v(" "),a("li",[a("p",[t._v("(5)"),a("code",[t._v("int*(*ptr)[4]; //指针所指向的类型是int *()[4]")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v('当你对C 越来越熟悉时，你会发现，把与指针搅和在一起的"类型"这个概念分成 "指针的类型"和"指针所指向的类型"两个概念，是'),s("strong",[this._v("精通指针的关键点之一")]),this._v("。 我看了不少书，发现有些写得差的书中，就把指针的这两个概念搅在一起了， 所以看起书来前后矛盾，越看越糊涂。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1-3-指针的值—或者叫指针所指向的内存区或地址『注意和前面的区别，很重要』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-指针的值—或者叫指针所指向的内存区或地址『注意和前面的区别，很重要』"}},[this._v("#")]),this._v(" 1.3.指针的值—或者叫指针所指向的内存区或地址『注意和前面的区别，很重要』")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("在 32 位程序里，所有类型的指针的值都是一个 32 位整数，因为 32 位程序里内存地址全都是 32 位长。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("以后，我们说一个指针的值是 XX，就相当于说该指针指向了以 XX 为首地址的一片内存区域；我们说一个指针指向了某块内存区域， 就相当于说该指针的值是这块内存区域的"),s("strong",[this._v("首地址")]),this._v("。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("这个指针的类型是什么？")]),this._v(" "),s("li",[this._v("指针指的类型是什么？")]),this._v(" "),s("li",[this._v("该指针指向了哪里？（重点注意）")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_1-4-指针本身所占据的内存区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-指针本身所占据的内存区"}},[this._v("#")]),this._v(" 1.4.指针本身所占据的内存区")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_02-指针的算术运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_02-指针的算术运算"}},[this._v("#")]),this._v(" 02.指针的算术运算")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//强制类型转换并不会改变a的类型")]),t._v("\nptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在上例中，指针 ptr 的类型是 "),s("code",[this._v("int*")]),this._v(",它指向的类型是"),s("code",[this._v("int")]),this._v("，它被初始化为指向整型变量 a。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("；\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个例子将整型数组中各个单元的值加 1。由于每次循环都将指针ptr "),s("strong",[this._v("加 1 个单元")]),this._v("，所以每次循环都能访问数组的下一个单元。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You_are_a_girl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("在这个例子中，ptr 被加上了 5，编译器是这样处理的：将指针 ptr 的 值加上 5 乘 "),s("code",[this._v("sizeof(int)")]),this._v("，在 32 位程序中就是加上了 5 乘 4=20。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" You_are_a_girl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//printf("p=%d\\n",p);')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//printf("ptr=%d\\n",ptr);')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//printf("*ptr=%d\\n",*ptr);')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**ptr=%c\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//printf("ptr=%d\\n",ptr);')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//printf("*ptr=%d\\n",*ptr);')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**ptr=%c\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("误区一、输出答案为 Y 和 o\n"),a("ul",[a("li",[t._v("误解:ptr 是一个 char 的二级指针,当执行"),a("code",[t._v("ptr++")]),t._v(";时,会使指针加一个"),a("code",[t._v("sizeof(char)")]),t._v(",所以输出如上结果,这个可能只是少部分人的结果.")])])]),t._v(" "),a("li",[t._v("误区二、输出答案为 Y 和 a\n"),a("ul",[a("li",[t._v("误解:ptr 指向的是一个 "),a("code",[t._v("char *")]),t._v("类型,当执行 "),a("code",[t._v("ptr++;")]),t._v("时,会使指针加一个"),a("code",[t._v("sizeof(char *)")]),t._v("(有可能会有人认为这个值为1,那就会得到误区一的答案,这个值应该是 4,参考前面内容), 即"),a("code",[t._v("&p+4;")]),t._v(" 那进行一次取值运算不就指向数组中的第五个元素了吗?那输出的结果不就是数组中第五个元 素了吗?答案是否定的.")])])]),t._v(" "),a("li",[t._v("正解:\n"),a("ul",[a("li",[t._v("ptr 的类型是"),a("code",[t._v("char **")]),t._v(",指向的类型是一个 "),a("code",[t._v("char *")]),t._v("类型,该指向的地址就是p的地址(&p),当执行"),a("code",[t._v("ptr++;")]),t._v("时,会使指针加一个"),a("code",[t._v("sizeof(char *)")]),t._v(",即"),a("code",[t._v("&p+4")]),t._v(";那"),a("code",[t._v("*(&p+4)")]),t._v("指向哪呢,这个你去问上帝吧,或者他会告诉你在哪?所以最后的输出会是一个随机的值,或许是一个非法操作.")])])]),t._v(" "),a("li",[t._v("总结一下:\n"),a("ul",[a("li",[t._v("一个指针"),a("code",[t._v("ptrold")]),t._v("加(减)一个整数 n 后，结果是一个新的指针"),a("code",[t._v("ptrnew")])]),t._v(" "),a("li",[t._v("ptrnew的类型和ptrold 的类型相同，ptrnew 所指向的类型和 ptrold 所指向的类型也相同。ptrnew的值将比 ptrold 的值增加(减少)了 n 乘"),a("code",[t._v("sizeof(ptrold 所指向的类型)")]),t._v("个字节。")])])]),t._v(" "),a("li",[t._v("指针和指针进行加减：\n"),a("ul",[a("li",[t._v("两个指针不能进行加法运算，这是非法操作，因为进行加法后，得到的 结果指向一个不知所向的地方，而且毫无意义。两个指针可以进行减法操作，但必须类型相同，一般用在数组方面，不多说了")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_03-运算符-和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_03-运算符-和"}},[this._v("#")]),this._v(" 03.运算符"),s("code",[this._v("&")]),this._v("和"),s("code",[this._v("*")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里"),s("code",[this._v("&")]),this._v("是取地址运算符，"),s("code",[this._v("*")]),this._v("是间接运算符。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("p",[a("code",[t._v("&a")]),t._v("的运算结果是一个指针，指针的类型是 a 的类型加个"),a("code",[t._v("*")]),t._v("，指针所 指向的类型是 a 的类型，指针所指向的地址嘛，那就是 a 的地址。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("*p")]),t._v(" 的运算结果就五花八门了。总之"),a("code",[t._v("*p")]),t._v(" 的结果是 p 所指向的东西， 这个东西有这些特点：它的类型是 p 指向的类型，它所占用的地址是 p 所指向的地址。")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\np"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//&a 的结果是一个指针，类型是 int*，指向的类型是")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//int，指向的地址是 a 的地址。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*p 的结果，在这里它的类型是 int，它所占用的地址是")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//p 所指向的地址，显然，*p 就是变量 a。")]),t._v("\n\nptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//&p 的结果是个指针，该指针的类型是 p 的类型加个*，")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在这里是 int **。该指针所指向的类型是 p 的类型，这")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//里是 int*。该指针所指向的地址就是指针 p 自己的地址。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*ptr 是个指针，&b 的结果也是个指针，且这两个指针")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//的类型和所指向的类型是一样的，所以用&b 来给*ptr 赋")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//值就是毫无问题的了。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("34")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*ptr 的结果是 ptr 所指向的东西，在这里是一个指针，")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对这个指针再做一次*运算，结果是一个int类型的变量。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_04-指针表达式『重要，还有左值』"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_04-指针表达式『重要，还有左值』"}},[this._v("#")]),this._v(" 04.指针表达式『重要，还有左值』")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pa"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//&a 是一个指针表达式。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//&pa 也是一个指针表达式。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*ptr 和&b 都是指针表达式。")]),t._v("\n    pa"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pa"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这也是指针表达式")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("parr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果把 arr 看作指针的话，arr 也是指针表达式")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    str"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("parr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*parr 是指针表达式")]),t._v("\n    str"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*(parr+1)是指针表达式")]),t._v("\n    str"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*(parr+2)是指针表达式")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("li",[a("p",[t._v("由于指针表达式的结果是一个指针，所以指针表达式也具有指针所具有的四个要素：")]),t._v(" "),a("ul",[a("li",[t._v("指针的类型")]),t._v(" "),a("li",[t._v("指针所指向的类型")]),t._v(" "),a("li",[t._v("指针指向的内存区")]),t._v(" "),a("li",[t._v("指针自身占据的内存")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("在例七中")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("li",[a("p",[a("code",[t._v("*ptr")]),t._v("是 一个左值，因为"),a("code",[t._v("*ptr")]),t._v("这个指针已经占据了内存，其实"),a("code",[t._v("*ptr")]),t._v(" 就是指针 pa， 既然 "),a("strong",[t._v("pa 已经在内存中有了自己的位置")]),t._v("，那么"),a("code",[t._v("*ptr")]),t._v("当然也有了自己的位置。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_05-数组和指针的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_05-数组和指针的关系"}},[this._v("#")]),this._v(" 05.数组和指针的关系")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvalue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//也可写成：value=*array;")]),t._v("\nvalue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//也可写成：value=*(array+3);")]),t._v("\nvalue"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//也可写成：value=*(array+4);")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上例中，一般而言数组名 array 代表数组本身，类型是"),a("code",[t._v("int[10]")]),t._v("，但如果把 array 看做指针的话，它指向数组的第0个单元，类型是"),a("code",[t._v("int*")]),t._v("， 所指向的类型是数组单元的类型即"),a("code",[t._v("int")]),t._v("。因此"),a("code",[t._v("*array")]),t._v("等于 0 就一点也不 奇怪了。同理，array+3 是一个指向数组第 3 个单元的指针，所以 "),a("code",[t._v("*(array+3)")]),t._v("等于 3。其它依此类推。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello,thisisasample!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi,goodmorning."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Helloworld"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("；\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//也可写成 strcpy(s,*str);")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//也可写成 strcpy(s,*(str+1));")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcpy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//也可写成 strcpy(s,*(str+2));")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上例中，str 是一个三单元的数组，该数组的每个单元都是一个指针， 这些指针各指向一个字符串。把指针数组名 str 当作一个指针的话，它指向数组的第 0 号单元，它的类型是 "),s("code",[this._v("char **")]),this._v("，它指向的类型是"),s("code",[this._v("char *")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("*str")]),t._v(" 也是一个指针，它的类型是 "),a("code",[t._v("char *")]),t._v("，它所指向的类型是 "),a("code",[t._v("char")]),t._v("，它 指向的地址是字符串"),a("code",[t._v('"Hello,thisisasample!"')]),t._v("的第一个字符的地址，即 'H'的地址。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("注意:字符串相当于是一个数组,在内存中以数组的形式储 存,只不过字符串是一个数组常量,内容不可改变,且只能是右值.如果看成指针的话,他即是常量指针,也是指针常量")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("str+1也是一个指针，它指向数组的第 1 号单元，它的类型是"),s("code",[this._v("char**")]),this._v("， 它指向的类型是 "),s("code",[this._v("char*")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("*(str+1)")]),this._v("也是一个指针，它的类型是"),s("code",[this._v("char*")]),this._v("，它所指向的类型是 char， 它指向 "),s("code",[this._v('"Hi,goodmorning."')]),this._v("的第一个字符'H'")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("声明了一个数组"),s("code",[this._v("TYPE array[n]")]),this._v("，则数组名称 array 就有了两重含义：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("第一，它代表整个数组，它的类型是"),a("code",[t._v("TYPE[n]")]),t._v("；")]),t._v(" "),a("li",[t._v("第二 ，它是一个常量指针，该指针的类型是"),a("code",[t._v("TYPE*")]),t._v("，该指针指向的类型是"),a("code",[t._v("TYPE")]),t._v("，也就是数组单元的类型，该指针指向的内存区就是数组第 0 号单元，该指针自己占 有单独的内存区，注意它和数组第 0 号单元占据的内存区是不同的。该 指针的值是不能修改的，即类似"),a("code",[t._v("array++")]),t._v("的表达式是错误的。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("在表达式 sizeof(array)中，数组名 array 代表"),a("strong",[t._v("数组本身")]),t._v("，故这时 sizeof 函数测出的是整个数组的大小")]),t._v(" "),a("li",[t._v("在表达式"),a("code",[t._v("*array")]),t._v("中，array 扮演的是指针，因此这个表达式的结果就是 数组第 0 号单元的值。"),a("code",[t._v("sizeof(*array)")]),t._v("测出的是数组单元的大小。")]),t._v(" "),a("li",[t._v("表达式 array+n（其中 n=0，1，2，.....）中，array 扮演的是指 针，故 array+n 的结果是一个指针，它的类型是"),a("code",[t._v("TYPE *")]),t._v("，它指向的类型是 TYPE，它指向数组第 n 号单元。故"),a("code",[t._v("sizeof(array+n)")]),t._v("测出的是指针类型的大小。在 32 位程序中结果是4")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上例中 ptr 是一个指针，它的类型是"),s("code",[this._v("int(*)[10]")]),this._v("，他指向的类型是 int[10]")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[s("p",[this._v("我们用整个数组的首地址来初始化它。在语句 ptr=&array 中，array 代表"),s("strong",[this._v("数组本身")]),this._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n则在 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v(" 位程序中，有：\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_06-指针和结构类型的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_06-指针和结构类型的关系"}},[this._v("#")]),this._v(" 06.指针和结构类型的关系")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("可以声明一个指向结构类型对象的指针。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyStruct")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyStruct")]),t._v(" ss"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明了结构对象 ss，并把 ss 的成员初始化为 20，30 和 40。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyStruct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明了一个指向结构对象 ss 的指针。它的类型是")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//MyStruct *,它指向的类型是 MyStruct。")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pstr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//声明了一个指向结构对象 ss 的指针。但是 pstr 和")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//它被指向的类型 ptr 是不同的。")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("答案：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\nptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向运算符，或者可以这们(*ptr).a,建议使用前者")]),t._v("\nptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pstr； "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问了 ss 的成员 a。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pstr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问了 ss 的成员 b。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pstr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问了 ss 的成员 c。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("虽然我在我的"),s("code",[this._v("MSVC++6.0")]),this._v("上调式过上述代码，但是要知道，这样使用 pstr 来访问结构成员是不正规的，为了说明为什么不正规，让我们看看怎样通过指针来访问数组的各个单元: (将结构体换成数组)")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pa"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n通过指针 pa 访问数组 array 的三个单元的方法是：\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问了第 0 号单元")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pa"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问了第 1 号单元")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pa"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问了第 2 号单元")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以，在例十二中，即使"),s("code",[this._v("*pstr")]),this._v("访问到了结构对象 ss 的第一个成 员变量 a，也不能保证"),s("code",[this._v("*(pstr+1)")]),this._v("就一定能访问到结构成员 b。因为成员 a 和成员 b 之间可能会有若干填充字节，说不定"),s("code",[this._v("*(pstr+1)")]),this._v("就正好访问到了这些填充字节呢。这也证明了指针的灵活性。要是你的目的就是想 看看各个结构成员之间到底有没有填充字节，嘿，这倒是个不错的方法。 不过指针访问结构成员的正确方法应该是象例十二中使用指针 ptr 的方法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_07-指针和函数的关系ok"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_07-指针和函数的关系ok"}},[this._v("#")]),this._v(" 07.指针和函数的关系OK")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("可以把一个指针声明成为一个指向函数的指针。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pfun1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npfun1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("fun1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pfun1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcdefg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//通过函数指针调用函数。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("可以把指针作为函数的形参。在函数调用语句中，可以用指针表达式来作为实参。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcdefghijklmn"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ts"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_08-指针类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_08-指针类型转换"}},[this._v("#")]),this._v(" 08.指针类型转换")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("fptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在上面的例子中，假如我们想让指针 p 指向实数 f，应该怎么办？\n是用下面的语句吗？\n"),s("code",[this._v("p=&f;")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("不对。因为指针 p 的类型是"),s("code",[this._v("int *")]),this._v("，它指向的类型是 int。表达式")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("&f")]),this._v("的结果是一个指针，指针的类型是"),s("code",[this._v("float *")]),this._v(",它指向的类型是 float。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("两者不一致，直接赋值的方法是不行的。至少在我的 "),s("strong",[this._v("MSVC++6.0")]),this._v(' 上，对指针的赋值语句要求赋值号两边的类型一致，所指向的类型也一致，其它的编译器上我没试过，大家可以试试。为了实现我们的目的，需要进行"'),s("strong",[this._v("强制类型转换")]),this._v('"：\n'),s("code",[this._v("p=(int*)&f;")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("一个函数如果使用了指针作为形参，那么在函数调用语句的实参和形参的结合过程中，"),s("strong",[this._v("必须保证类型一致 ，否则需要强制转换")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("125")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    charc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注意到了吗？在函数调用语句中，实参&a 的结果是一个指针，它的类型是"),a("code",[t._v("int *")]),t._v("，它指向的类型是 int。形参这个指针的类型是"),a("code",[t._v("char *")]),t._v("，它指向的类型是 char。这样，在实参和形参的结合过程中，我们必须进行一次从"),a("code",[t._v("int *")]),t._v("类型到"),a("code",[t._v("char *")]),t._v("类型的转换。结合这个例子，我们可以这样来想象编译器进行转换的过程：编译器先构造一个临时指针"),a("code",[t._v("char *temp")]),t._v("，然后执行"),a("code",[t._v("temp=(char *)&a")]),t._v("，最后再把 temp 的值传递给 s。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以最后的结果是：s 的类型是"),s("code",[this._v("char *")]),this._v(",它指向的类型是 char，它指向的地址就是a 的首地址。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nTYPE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//TYPE 是 int，char 或结构类型等等类型。")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20345686")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20345686")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//我们的目的是要使指针 ptr 指向地址 20345686")]),t._v("\nptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//我们的目的是要使指针 ptr 指向地址 20345686")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("编译一下吧。结果发现后面两条语句全是错的。")])]),this._v(" "),s("li",[s("p",[this._v("那么我们的目的就不能达到了吗？不，还有办法：")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nTYPE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//TYPE 是 int，char 或结构类型等等类型。")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("N \t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//N 必须代表一个合法的地址；")]),t._v("\nptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TYPE"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("a； \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//呵呵，这就可以了。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("严格说来这里的"),s("code",[this._v("(TYPE *)")]),this._v("和指针类型转换中的"),s("code",[this._v("(TYPE *)")]),this._v("还不一样。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("这里的"),a("code",[t._v("(TYPE*)")]),t._v("的意思是把"),a("strong",[t._v("无符号整数")]),t._v(" a 的值当作一个地址来看待。上面强 调了 a 的值必须代表一个合法的地址，否则的话，在你使用"),a("code",[t._v("ptr")]),t._v("的时候， 就会出现非法操作错误。")]),t._v(" "),a("li",[t._v("想想能不能反过来，把指针指向的地址即指针的值当作一个整数出来。完全可以。下面的例子演示了把一个指针的值当作一个整数取出 来，然后再把这个整数当作一个地址赋给一个指针：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把指针 ptr 的值当作一个整数取出来。")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把这个整数的值当作一个地址赋给指针 str。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("现在我们已经知道了，可以把指针的值当作一个整数取出来，也可以把一个整数值当作地址赋给一个指针。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_09-指针的安全问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_09-指针的安全问题"}},[this._v("#")]),this._v(" 09.指针的安全问题")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1298")]),t._v("；\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("指针 ptr 是一个"),s("code",[this._v("int *")]),this._v("类型的指针，它指向的类型是 int。它指向的地址就是 s 的首地址。在 32 位程序中，s 占一个字节，int 类型占四个字节。最后一条语句不但改变了 s 所占的一个字节，还把和 s 相临的高地址方向的三个字节也改变了。这三个字节是干什么的？只有编译程序知道，而写程序的人是不太可能知道的。也许这三个字节里存储了非常重要的数据，也许这三个字节里正好是程序的一条代码，而由于你对指针的马虎应用，这三个字节的值被改变了！这会造成崩溃性的错误。"),s("br"),this._v("\n让我们再来看一例：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("例19：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("115")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[this._v("所以"),s("strong",[this._v("在使用指针时，程序员心里必须非常清楚：我的指针究竟指向了哪里")]),this._v("。在用指针访问数组的时候，也要注 意不要超出数组的低端和高端界限，否则也会造成类似的错误")])},function(){var t=this.$createElement,s=this._self._c||t;return s("li",[this._v("如果"),s("code",[this._v("sizeof(ptr2 的 类 型 ) 小 于 sizeof(ptr1 的类型)")]),this._v("，那么在使用指针 ptr1 来访问 ptr2 所指向的存储区时是"),s("strong",[this._v("不安全的")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_10-结束语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-结束语"}},[this._v("#")]),this._v(" 10.结束语")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("各位，现在你是否已经觉得指针再也不是你所想的那么难了")]),this._v(" "),s("li",[this._v("如果你的回答是：对，不难！哈哈，恭喜你，你已经掌握 C 语言的精华了，C中唯一的难点就是指针，指针搞定其它小菜而已，重要的是实践。")]),this._v(" "),s("li",[this._v("唉，已经到了该说再见的时候了，祝各位在C语言的学习中一帆风顺，让我们一起用语言来谱写我们的人生吧！")])])}],!1,null,null,null);s.default=e.exports}}]);