(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{280:function(a,t,s){"use strict";s.r(t);var r=s(0),v=Object(r.a)({},(function(){var a=this.$createElement;this._self._c;return this._m(0)}),[function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"scala的特殊性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala的特殊性"}},[a._v("#")]),a._v(" Scala的特殊性")]),a._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[a._v("#")]),a._v(" 目录")]),a._v(" "),s("h2",{attrs:{id:"scala编程-译者序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scala编程-译者序"}},[a._v("#")]),a._v(" Scala编程-译者序")]),a._v(" "),s("ul",[s("li",[a._v("相信大多数商业软件的程序员都是从Fortran、Pascal、C/C++/Java或COBOL语言一路学起的。本书中，这一大类的语言被称为是"),s("strong",[a._v("指令式语言")]),a._v("，意指以变量和过程语句构造指令的方式对需要实现的目的进行编码的语言。与之相对的是被称为函数式语言的另一个大类，这种语言把程序的目的转换为函数和函数应用，是以函数计算这种不同的视角来处理一般问题的。")]),a._v(" "),s("li",[a._v("直到现在，Lisp、Scheme或者Haskell 这样的函数式语言也仅仅还是“小众”语言。这在TIOBE语言排行榜上也可见一斑。上榜的前20 位几乎被面向对象的或者面向过程的指令式语言占满。尤其是前三甲则几乎始终被Java、C、和C++所把持。反观函数式语言，Lisp在第13位，是最靠前的了，Scheme在第25位，Haskell在第40位左右。但并不是说函数式语言对于指令式语言就不具有可比性,相反，在很多地方函数式语言都体现了它们独到的优势，如:代码的简洁性、值的不可改变、函数的无副作用、值和函数替换的指称透明等。")]),a._v(" "),s("li",[a._v("但函数式语言与指令式语言总显得有点儿“格格不入”。一-个被指令式语言锻炼出来的头脑很难理解函数式语言的精髓，已经用惯了循环语句的方式解决问题，想要把它转换为递归语句也不是很容易的事情。莫非，函数式语言始终只能作为学术派的思维游戏，而不能适应于现代商业软件开发的需要，因此无缘商业软件开发浪潮的洗礼吗?")]),a._v(" "),s("li",[a._v("所以说，Scala语言的确具有很新颖的创意。因为它能很巧妙地把指令式语言与函数式语言结合在一起。用Martin Odersky 的话说，就是:指令式语言与函数式语言本就是一枚硬币的两面，它们不应是互相排斥、非此即彼的，而是可以互相协调，共同发挥出更大力量的。")])]),a._v(" "),s("h2",{attrs:{id:"序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#序"}},[a._v("#")]),a._v(" 序")]),a._v(" "),s("ul",[s("li",[a._v("Martin Odersky设计的Pizza语言曾经震惊了Java世界。尽管Pizza语言本身并不流行，但它巧妙地把面向对象和函数型语言两种风格融合在了一起，形成了自然而又强有力的组合。Pizza 语言的设计成为了Java泛型的基础，Martin的GJ ( Generic Java)编译器从Java 1.3开始成为了Sun公司的标准编译器（尽管关闭了泛型)。我有幸维护这个编译器多年，因此对Martin设计与实现语言的能力有非常直接的体会。")]),a._v(" "),s("li",[a._v("近年来，静态类型语言受到了冲击。"),s("strong",[a._v("Java的广泛应用暴露了静态语言编程会导致大量固定写法的弊病")]),a._v("。常见的看法是我们应避免静态类型从而消除这种代码，于是人们对动态语言如 Python，Ruby 和Groovy的兴趣开始增加。这种看法被Martin最近的构想，Scala的出现打破。")]),a._v(" "),s("li",[a._v("Scala是一种类型优雅的语言:"),s("strong",[a._v("它是静态类型的，但仅在需要的地方显式定义类型")]),a._v("。Scala 从面向对象和函数式语言两方面获得了强大的特性，然后用全新的理念把它们完美地整合成一体。它的语法是如此的轻量级，而原语（primitive )又如此富有表达力，以至于根本可以认为API的使用不会产生语法开销。我们可以在标准库中，如拆分器、组合器和执行器中发现例子。而这也说明Scala是支持内嵌的特定领域语言。")]),a._v(" "),s("li",[a._v("Scala会成为下一个伟大的语言吗?只有时间可以证明一切。我相信 Martin Odersky 的小组绝对有这样的能力和水平做到这-一-点。不过有一件事是确定无疑的:Scala语言建立了衡量未来语言的新标准。")])])])}],!1,null,null,null);t.default=v.exports}}]);