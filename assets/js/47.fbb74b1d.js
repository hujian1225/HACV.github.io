(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{218:function(t,e,_){"use strict";_.r(e);var s=_(0),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),_("ul",[_("li",[t._v("C++中STL中的map,set")]),t._v(" "),_("li",[t._v("Java中的HashMap")]),t._v(" "),_("li",[t._v("维基百科-"),_("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("红黑树的应用"),_("OutboundLink")],1)])]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),_("p",[t._v("很显然有2个属性；\n1）不能有两个连续的红色")]),t._v(" "),_("p",[t._v("2）红色节点，他必须有父节点，而且这个父节点一定是黑色的。")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),_("p",[t._v("新增一个节点，你就要看看这棵树是否违反了我们红黑树的性质，然后，让他自己来平衡。")]),t._v(" "),t._m(24),t._v(" "),_("p",[t._v("自平衡就是一个调整的过程。")]),t._v(" "),_("p",[t._v("具体的：")]),t._v(" "),_("p",[t._v("你新增的这个节点后，你去编代码的时候，你只需要考虑。从当前节点的三代！！")]),t._v(" "),_("p",[t._v("超过第4代就不管了。")]),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),_("p",[t._v("你祖父母都降级了，所以给他一个好处，就是把B节点给他了。")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),_("p",[t._v("CRUD")]),t._v(" "),t._m(35),t._v(" "),_("p",[t._v("查找很简答--------------")]),t._v(" "),t._m(36),t._v(" "),_("p",[t._v("U-更新（查找到后改就）")]),t._v(" "),_("p",[t._v("D-删除（复杂）")]),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),_("p",[t._v("直系CPG在一条线上，/或者\\")]),t._v(" "),_("p",[t._v("三角关系是，不在一条直线上（也2种）")]),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),_("p",[t._v("事务(Transaction)：是由"),_("strong",[t._v("一系列")]),t._v("对系统中数据进行访问与更新的操作所组成的一个程序执行"),_("strong",[t._v("逻辑单元")]),t._v("。事务是DBMS中最基础的单位，事务不可分割。『"),_("strong",[t._v("一组")]),_("font",{staticStyle:{background:"yellow"}},[t._v("原子性")]),t._v("的SQL查询』")],1),t._v(" "),_("p",[t._v("事务具有4个基本特征，分别是:（简称ACID。）")]),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),t._m(56),t._v(" "),_("p",[t._v("『"),_("font",{staticStyle:{background:"yellow"}},[t._v("没有完全理解")]),t._v("』")],1),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),_("p",[t._v("即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。")]),t._v(" "),_("p",[t._v("多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。")]),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),_("ul",[_("li",[t._m(61),t._v(" "),_("ul",[_("li",[_("strong",[t._v("最低的隔离级别")]),t._v("，什么都不需要做，一个事务可以读到"),_("font",{staticStyle:{background:"yellow"}},[t._v("另一个事务")]),_("strong",[t._v("未提交")]),t._v("的结果。所有的并发事务问题都会发生。"),_("font",{staticStyle:{background:"yellow"}},[t._v("脏读")])],1)])]),t._v(" "),_("li",[t._m(62),t._v(" "),_("ul",[_("li",[t._v("只有在事务提交后，其更新结果才会被其他事务看见。可以"),_("strong",[t._v("解决脏读问题")]),t._v("。"),_("font",{staticStyle:{background:"yellow"}},[t._v("不可重复读")])],1)])]),t._v(" "),t._m(63),t._v(" "),t._m(64)]),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._v(" "),t._m(69),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),t._m(73),t._v(" "),t._m(74),t._v(" "),t._m(75),t._v(" "),t._m(76),t._v(" "),_("p",[t._v("数据库索引是为了增加查询速度而对表字段附加的一种标识，是对数据库表中一列或多列的值进行排序的一种结构。")]),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),t._m(81),t._v(" "),_("p",[t._v("通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。")]),t._v(" "),t._m(82),t._v(" "),_("p",[t._v("可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。")]),t._v(" "),_("p",[t._v("在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。")]),t._v(" "),_("p",[t._v("通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。")]),t._v(" "),t._m(83),t._v(" "),_("p",[t._v("创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。")]),t._v(" "),t._m(84),t._v(" "),_("p",[t._v("当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。")]),t._v(" "),t._m(85),t._v(" "),_("p",[t._v("在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。")]),t._v(" "),t._m(86),t._v(" "),t._m(87),t._v(" "),t._m(88),t._v(" "),t._m(89),t._v(" "),t._m(90),t._v(" "),t._m(91),t._v(" "),t._m(92),t._v(" "),_("p",[t._v("WAL优缺点")]),t._v(" "),_("p",[t._v("使用WAL代替回滚日志有其优点和缺点。")]),t._v(" "),t._m(93),t._v(" "),t._m(94),t._v(" "),_("p",[t._v("缺点：")]),t._v(" "),t._m(95),t._v(" "),t._m(96),t._v(" "),_("p",[t._v("版权声明：本文为CSDN博主「weixin_39811842」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/weixin_39811842/article/details/111509504")]),t._v(" "),t._m(97),t._v(" "),t._m(98),t._v(" "),_("p",[t._v("Mysql主要包含四种隔离状态：")]),t._v(" "),t._m(99),t._v(" "),t._m(100),t._v(" "),t._m(101),t._v(" "),_("p",[t._v("MVCC是一种多版本并发控制机制")]),t._v(" "),_("p",[t._v("是MySQL的InnoDB存储引擎"),_("font",{staticStyle:{background:"yellow"}},[t._v("实现")]),_("strong",[t._v("隔离级别")]),t._v("的一种具体方式，用于实现提交读和可重复读这两种隔离级别。MVCC是通过保存数据在某个时间点的快照来实现该机制，其在每行记录后面保存两个隐藏的列，分别保存这个行的创建版本号和删除版本号，然后Innodb的MVCC使用到的快照存储在Undo日志中，该日志通过回滚指针把一个数据行所有快照连接起来。")],1),t._v(" "),_("h3",{attrs:{id:"『学习方法论』"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#『学习方法论』"}},[t._v("#")]),t._v(" 『"),_("font",{staticStyle:{background:"yellow"}},[t._v("学习方法论")]),t._v("』")],1),t._v(" "),_("ul",[_("li",[t._v("分清楚概念中『逻辑上的』和『实现层面上的』")]),t._v(" "),_("li",[t._v("将数据结构和算法中的『逻辑结构』和『物理结构』的概念，转移到『数据库』的学习")]),t._v(" "),t._m(102),t._v(" "),_("li",[t._v("优点："),_("font",{staticStyle:{background:"yellow"}},[t._v("将各种术语概念连接在一起，以后就能少被网上层次不齐的资料概念带偏")])],1)]),t._v(" "),t._m(103),t._v(" "),t._m(104),t._v(" "),t._m(105),t._v(" "),t._m(106),t._v(" "),t._m(107),t._v(" "),_("p",[t._v("数据库引擎是用于存储、处理和保护数据的核心服务。利用数据库引擎可控制访问权限并快速处理事务，从而满足企业内大多数需要处理大量数据的应用程序的要求。使用数据库引擎创建用于联机事务处理或联机分析处理数据的关系数据库。这包括创建用于存储数据的表和用于查看、管理和保护数据安全的数据库对象（如索引、视图和存储过程）。")]),t._v(" "),_("p",[t._v("MySQL存储引擎主要有：")]),t._v(" "),t._m(108),t._v(" "),_("p",[t._v("但是最常用的是InnoDB和Mylsam。")]),t._v(" "),t._m(109),t._v(" "),t._m(110),t._v(" "),_("p",[t._v("MyIASM是MySQL"),_("font",{staticStyle:{background:"yellow"}},[t._v("默认")]),t._v("的引擎，但是"),_("font",{staticStyle:{background:"yellow"}},[t._v("它没有提供对数据库事务的支持")]),t._v("，也不支持行级锁和外键，因此当INSERT或UPDATE数据时即写操作需要"),_("strong",[t._v("锁定整个表")]),t._v("，效率便会低一些。")],1),t._v(" "),_("p",[t._v("MyIsam 存储引擎独立于操作系统，也就是可以在windows上使用，也可以比较简单的将数据转移到linux操作系统上去。")]),t._v(" "),t._m(111),t._v(" "),t._m(112),t._v(" "),t._m(113),t._v(" "),t._m(114),t._v(" "),t._m(115),t._v(" "),t._m(116),t._v(" "),t._m(117),t._v(" "),t._m(118),t._v(" "),_("p",[t._v("Innodb引擎提供了对数据库ACID事务的支持，并且实现了SQL标准的四种隔离级别，关于数据库事务与其隔离级别的内容请见数据库事务与其隔离级别这类型的文章。该引擎还提供了行级锁和外键约束")]),t._v(" "),t._m(119),t._v(" "),t._m(120),t._v(" "),t._m(121),t._v(" "),t._m(122),t._v(" "),t._m(123),t._v(" "),_("p",[t._v("InnoDB的辅助索引数据域存储的也是相应记录主键的值而不是地址，所以当以辅助索引查找时，会先根据辅助索引找到主键，再根据主键索引找到实际的数据。所以Innodb不建议使用过长的主键，否则会使辅助索引变得过大。建议使用自增的字段作为主键，这样B+Tree的每一个结点都会被顺序的填满，而不会频繁的分裂调整，会有效的提升插入数据的效率。")]),t._v(" "),t._m(124),t._v(" "),t._m(125),t._v(" "),_("p",[t._v("3）行数保存：InnoDB 中不保存表的具体行数，也就是说，执行select count() fromtable时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count()语句包含where条件时，两种表的操作是一样的。")]),t._v(" "),_("p",[t._v("4）索引存储：对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。MyISAM支持全文索引（FULLTEXT）、压缩索引，InnoDB不支持。")]),t._v(" "),_("p",[t._v("MyISAM的索引和数据是分开的，并且索引是有压缩的，内存使用率就对应提高了不少。能加载更多索引，而Innodb是索引和数据是紧密捆绑的，没有使用压缩从而会造成Innodb比MyISAM体积庞大不小。")]),t._v(" "),_("p",[t._v("InnoDB存储引擎被完全与MySQL服务器整合，InnoDB存储引擎为在主内存中缓存数据和索引而维持它自己的缓冲池。InnoDB存储它的表＆索引在一个表空间中，表空间可以包含数个文件（或原始磁盘分区）。这与MyISAM表不同，比如在MyISAM表中每个表被存在分离的文件中。InnoDB 表可以是任何尺寸，即使在文件尺寸被限制为2GB的操作系统上。")]),t._v(" "),_("p",[t._v("5）服务器数据备份：InnoDB必须导出SQL来备份，LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用。")]),t._v(" "),_("p",[t._v("MyISAM应对错误编码导致的数据恢复速度快。MyISAM的数据是以文件的形式存储，所以在跨平台的数据转移中会很方便。在备份和恢复时可单独针对某个表进行操作。")]),t._v(" "),_("p",[t._v("InnoDB是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据量达到几十G的时候就相对痛苦了。")]),t._v(" "),_("p",[t._v("6）锁的支持：MyISAM只支持表锁。InnoDB支持表锁、行锁，行锁大幅度提高了多用户并发操作的新能。但是InnoDB的行锁，只是在WHERE的主键是有效的，非主键的WHERE都会锁全表的。")]),t._v(" "),t._m(126),t._v(" "),t._m(127),t._v(" "),t._m(128),t._v(" "),t._m(129),t._v(" "),t._m(130),t._v(" "),t._m(131),t._v(" "),t._m(132),t._v(" "),_("p",[t._v("Redis 支持的数据结构丰富，包括hash、set、list等。")]),t._v(" "),t._m(133),t._v(" "),t._m(134),t._v(" "),t._m(135),t._v(" "),_("ul",[_("li",[_("p",[t._v("Memcached的"),_("a",{attrs:{href:"https://www.runoob.com/memcached/memcached-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("菜鸟教程"),_("OutboundLink")],1)])]),t._v(" "),t._m(136),t._v(" "),t._m(137),t._v(" "),t._m(138),t._v(" "),t._m(139),t._v(" "),t._m(140),t._v(" "),t._m(141)]),t._v(" "),t._m(142),t._v(" "),t._m(143),t._v(" "),t._m(144),t._v(" "),t._m(145),t._v(" "),_("p",[_("font",{staticStyle:{background:"yellow"}},[t._v("单个reactor？？？")])],1),t._v(" "),t._m(146),t._v(" "),t._m(147),t._v(" "),t._m(148),t._v(" "),t._m(149),t._v(" "),t._m(150),t._v(" "),t._m(151),t._v(" "),t._m(152),t._v(" "),_("p",[t._v("对redis做读取、插入、删除等操作时，会把位于table[dict->rehashidx]位置的链表移动到新的dictht中，然后把rehashidx做加一操作，移动到后面一个槽位。")]),t._v(" "),t._m(153),t._v(" "),_("p",[t._v("后台定时任务rehash调用链，同时可以通过server.hz控制rehash调用频率")]),t._v(" "),t._m(154),t._v(" "),_("p",[t._v("C++的hash表中有一个负载因子loadFactor，当loadFactor<=1时，hash表查找的期望复杂度为O(1). 因此，每次往hash表中添加元素时，我们必须保证是在loadFactor <1的情况下，才能够添加。")]),t._v(" "),_("p",[t._v("因此，当Hash表中loadFactor==1时，Hash就需要进行rehash。rehash过程中，会模仿C++的vector扩容方式，Hash表中每次发现loadFactor ==1时，就开辟一个原来桶数组的两倍空间，称为新桶数组，然后把原来的桶数组中元素全部重新哈希到新的桶数组中。")]),t._v(" "),t._m(155),t._v(" "),_("blockquote",[_("p",[t._v("华为云："),_("a",{attrs:{href:"https://bbs.huaweicloud.com/blogs/175116",target:"_blank",rel:"noopener noreferrer"}},[t._v("redis 数据删除策略和逐出算法"),_("OutboundLink")],1)])]),t._v(" "),t._m(156),t._v(" "),_("p",[t._v("key操作常用命令:del,exists,expire,rename")]),t._v(" "),_("p",[t._v("string 操作常用命令:set get incr decr del apend")]),t._v(" "),_("p",[t._v("hash 操作常用命令:hset hget hdel")]),t._v(" "),_("p",[t._v("list 操作常用命令:lpush rpush lpop rpop lset lindex")]),t._v(" "),_("p",[t._v("set 操作常用命令:sadd srem sunion sdiff sinter")]),t._v(" "),_("p",[t._v("zset 操作常用命令:zadd zrem")]),t._v(" "),t._m(157)])}),[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"数据库基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据库基础"}},[this._v("#")]),this._v(" 数据库基础")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_01-数据设计基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_01-数据设计基础"}},[this._v("#")]),this._v(" 01.数据设计基础")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4.png",alt:"数据库设计步骤"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_02-红黑树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_02-红黑树"}},[this._v("#")]),this._v(" 02.红黑树")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-1-应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-应用场景"}},[this._v("#")]),this._v(" 2.1.应用场景")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-2-红黑树笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-红黑树笔记"}},[this._v("#")]),this._v(" 2.2.红黑树笔记")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("红黑树变色、自旋、自平衡原理")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/01.png",alt:"01"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("本节课的重点是，自旋和变色")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb002.png",alt:"rb002"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("注意：红黑树新插入的节点『必须』是红色！")]),this._v(" "),e("li",[this._v("每个叶子节点都是黑色的空节点（NIL）！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb03.png",alt:"rbb03"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb04.png",alt:"rbb04"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb05.png",alt:"rbb05"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb06.png",alt:"rbb06"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb07.png",alt:"rbb07"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("NIL的颜色必须是黑色的，在Java里面，他的值是NULL，因为这个叶子节点是虚拟出来的。")]),this._v(" "),e("p",[this._v("（这个是为了用来满足性质4的）")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbb08.png",alt:"rbb08"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("3）红色节点不能为根节点（性质2），所以红色节点只能为"),e("strong",[this._v("子节点")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200325816.png",alt:"image-20210702200325816"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("叶子节点就是上面的，黑色椭圆。")]),this._v(" "),e("li",[this._v("红色非平衡和黑色完美平衡（中庸），红黑树是不完美平衡的。")]),this._v(" "),e("li",[this._v("AVL却是完美平衡。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb10.png",alt:"rb10"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("因为左边这样的AVL，不稳定，他这个时候退化为链表了。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb11.png",alt:"rb11"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们任何新增的红黑树的节点，默认都是新加"),e("strong",[this._v("红色")]),this._v("的节点。（因为这个不会影响性质5）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200621045.png",alt:"image-20210702200621045"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200632828.png",alt:"image-20210702200632828"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rb.png",alt:"rb"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("（只要有旋转，就会有"),e("strong",[this._v("一条线")]),this._v("互换的。）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("旋转节点的圆心，一定是他的子节点！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210702200729288.png",alt:"image-20210702200729288"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbleft.png",alt:"rbleft"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbleft2.png",alt:"rbleft2"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("上面的旋转，根本可以不分左边还是右边旋转。")]),this._v(" "),e("li",[this._v("下面是红黑树的操作：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091105553.png",alt:"image-20210703091105553"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("c-"),e("strong",[this._v("新增")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("r-读，"),e("strong",[this._v("查找")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbcase.png",alt:"rbcase"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("上面是我编程的时候的很多case的。")]),this._v(" "),e("li",[this._v("上面是做红黑树的所有情况。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbcreate.png",alt:"rbcreate"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091322201.png",alt:"image-20210703091322201"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091336549.png",alt:"image-20210703091336549"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091344050.png",alt:"image-20210703091344050"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091354784.png",alt:"image-20210703091354784"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/rbtrac.png",alt:"rbtrac"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("三角关系，其实就是先转换为三点一线关系。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/HACV/picture/img/image-20210703091444837.png",alt:"image-20210703091444837"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_03-基础面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_03-基础面试题"}},[this._v("#")]),this._v(" 03.基础面试题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-1-请你说一下数据库事务以及四个特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-请你说一下数据库事务以及四个特性"}},[this._v("#")]),this._v(" 3.1.请你说一下数据库事务以及四个特性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("事务(Transaction)")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[t._v("原子性("),_("strong",[t._v("A")]),t._v("tomicity)")]),t._v(" "),_("li",[t._v("一致性("),_("strong",[t._v("C")]),t._v("onsistency)")]),t._v(" "),_("li",[t._v("隔离性( "),_("strong",[t._v("I")]),t._v("solation）")]),t._v(" "),_("li",[t._v("持久性("),_("strong",[t._v("D")]),t._v("uration）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-2-详细说一下数据库（database）中“事务”的4大特征"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-详细说一下数据库（database）中“事务”的4大特征"}},[this._v("#")]),this._v(" 3.2.详细说一下数据库（Database）中“事务”的4大特征")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("1．原子性("),e("strong",[this._v("A")]),this._v("tomicity)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("原子性是指事务包含的所有操作要么全部成功，要么全部失败"),e("strong",[this._v("回滚")]),this._v("，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("2.一致性(Consistency)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("一致性：数据库在事务执行前后都保持一致性状态，在"),e("strong",[this._v("一致性状态")]),this._v("下，所有事务对一个数据的"),e("strong",[this._v("读取结果都是相同的。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态,也就是说一个事务"),e("strong",[this._v("执行之前")]),this._v("和"),e("strong",[this._v("执行之后")]),this._v("都必须处于一致性状态。拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间\n如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("3.隔离性（Isolation）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("隔离性是当多个用户"),e("strong",[this._v("并发访问")]),this._v("数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个"),e("strong",[this._v("并发事务")]),this._v("之间要相互隔离。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有"),e("strong",[this._v("各自")]),this._v("的"),e("strong",[this._v("完整数据空间")]),this._v("。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("不同的隔离级别：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Read Uncommitted（读取"),e("strong",[this._v("未提交")]),this._v("内容）：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Read Committed（读取"),e("strong",[this._v("提交")]),this._v("内容）：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("Repeated Read（可重复读）：")]),this._v(" "),e("ul",[e("li",[this._v("在一个事务中，对于同一份数据的读取结果总是相同的，无论是否有其他事务对这份数据进行操作，以及这个事务是否提交。可以"),e("strong",[this._v("解决脏读、不可重复读")]),this._v("。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("Serialization（可串行化）：")]),this._v(" "),e("ul",[e("li",[this._v("事务串行化执行，"),e("strong",[this._v("隔离级别最高")]),this._v("，牺牲了系统的并发性。可以解决并发事务的所有问题。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("完毕")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("ol",{attrs:{start:"4"}},[e("li",[this._v("持久性（Durability）")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("持久性是指一个事务"),e("strong",[this._v("一旦被提交了")]),this._v("，那么对数据库中的数据的改变就是"),e("strong",[this._v("永久性")]),this._v("的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，"),e("strong",[this._v("否则就会造成")]),this._v("我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-3-请你说一说数据库事务隔离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-请你说一说数据库事务隔离"}},[this._v("#")]),this._v(" 3.3.请你说一说数据库事务隔离")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("同一时间")]),this._v("，只允许"),e("strong",[this._v("一个事务")]),this._v("请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("辅助，解释，上面事物的4大特性")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-4-数据库的三大范式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-数据库的三大范式"}},[this._v("#")]),this._v(" 3.4.数据库的三大范式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("第一范式：当关系模式R的所有属性都不能再分解为更基本的数据单位时，称R是满足第一范式，即属性不可分")])]),this._v(" "),e("li",[e("p",[this._v("第二范式：如果关系模式R满足第一范式，并且R得所有非主属性都完全依赖于R的每一个候选关键属性，称R满足第二范式")])]),this._v(" "),e("li",[e("p",[this._v("第三范式：设R是一个满足第一范式条件的关系模式，X是R的任意属性集，如果X非传递依赖于R的任意一个候选关键字，称R满足第三范式，即非主属性不传递依赖于键码")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-5-请你说一说数据库索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-请你说一说数据库索引"}},[this._v("#")]),this._v(" 3.5.请你说一说数据库索引")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("索引是对数据库表中"),_("code",[t._v("一列")]),t._v("或"),_("code",[t._v("多列")]),t._v("的值"),_("strong",[t._v("进行排序")]),t._v("的一种结构，使用索引可快速访问数据库表中的特定信息。如果想按特定职员的姓来查找他或她，则"),_("strong",[t._v("与在表中搜索所有的行相比，索引有助于更快地获取信息")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("索引的一个主要目的就是加快检索表中数据的方法，亦即能协助信息搜索者尽快的找到符合限制条件的记录ID的"),e("strong",[this._v("辅助数据结构")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("DB在执行一条Sql语句的时候，默认的方式是根据搜索条件进行"),e("strong",[this._v("全表扫描")]),this._v("，遇到匹配条件的就加入搜索结果集合。如果我们对某一字段增加索引，查询时就会先去索引列表中一次定位到特定值的行数，大大减少遍历匹配的行数，所以能明显增加查询的速度。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-6-请你说一说inner-join和left-join"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-请你说一说inner-join和left-join"}},[this._v("#")]),this._v(" 3.6.请你说一说"),e("code",[this._v("inner join")]),this._v("和"),e("code",[this._v("left join")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("p",[t._v("left join(左联接) 返回包括"),_("strong",[t._v("左表中的所有记录")]),t._v("和"),_("code",[t._v("右表中联结字段相等")]),t._v("的记录")])]),t._v(" "),_("li",[_("p",[t._v("right join(右联接) 返回包括"),_("strong",[t._v("右表中的所有记录")]),t._v("和"),_("code",[t._v("左表中联结字段相等")]),t._v("的记录")])]),t._v(" "),_("li",[_("p",[t._v("inner join(等值连接) 只返回"),_("strong",[t._v("两个表中联结字段相")]),t._v("等的行")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-7-多加索引一定会好吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-多加索引一定会好吗"}},[this._v("#")]),this._v(" 3.7.多加索引一定会好吗")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("优点：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以"),e("strong",[this._v("大大加快数据的检索速度")]),this._v("，这也是创建索引的最主要的原因。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("缺点：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立"),e("code",[this._v("聚簇索引")]),this._v("，那么需要的空间就会更大。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-8-添加索引原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-添加索引原则"}},[this._v("#")]),this._v(" 3.8.添加索引原则")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("只有"),e("strong",[this._v("很少数据值的列")]),this._v("也不应该增加索引。这是因为，由于这些列的取值很少，例如"),e("strong",[this._v("人事表的性别列")]),this._v("，在查询的结果中，"),e("code",[this._v("结果集的数据行占了表中数据行的很大比例")]),this._v("，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("定义为"),e("code",[this._v("text")]),this._v("、"),e("code",[this._v("image")]),this._v("和"),e("code",[this._v("bit")]),this._v("数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当"),e("strong",[this._v("修改性能")]),this._v("远远大于"),e("strong",[this._v("检索性能")]),this._v("时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-9-请问k-v存储中，key有哪些要求？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-请问k-v存储中，key有哪些要求？"}},[this._v("#")]),this._v(" 3.9.请问k-v存储中，key有哪些要求？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("兴业银行，网上收集的题目")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-10-介绍数据库中的wal技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-介绍数据库中的wal技术"}},[this._v("#")]),this._v(" 3.10.介绍数据库中的WAL技术")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[t._v("WAL（Write-Ahead Logging，"),_("strong",[t._v("预写式日志")]),t._v("）")]),t._v(" "),_("li",[t._v("是一种数据安全写入机制。就是"),_("strong",[t._v("先写日志，然后在写入磁盘")]),t._v("，这样保证数据的安全性。Mysql中的Redo Log就是采用WAL机制。")]),t._v(" "),_("li",[t._v("Write-Ahead工作机制：先在内存中提交事务，然后写日志(在InnoDB中就是Redo Log，"),_("strong",[t._v("日志是为了防止宕机导致内存数据丢失")]),t._v(")，然后再后台任务中把内存中的数据"),_("strong",[t._v("异步")]),t._v("刷到磁盘。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("优点：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[e("p",[this._v("在大多数情况下，WAL的速度要快得多。")])]),this._v(" "),e("li",[e("p",[this._v("WAL提供了更多的并发性，因为读卡器不会阻塞写卡器，而写卡器也不会阻塞读卡器。读和写可以同时进行。")])]),this._v(" "),e("li",[e("p",[this._v("使用WAL，磁盘I/O操作往往更为连续。")])]),this._v(" "),e("li",[e("p",[this._v("WAL使用的fsync()操作更少，因此在fsync()系统调用中断的系统上不易受到问题的攻击")])])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[_("p",[t._v("一般情况下需要VFS支持共享内存模式(shared-memory primitives)。")])]),t._v(" "),_("li",[_("p",[t._v("操作数据库文件的进程必须在同一台主机上，不能用在网络操作系统。")])]),t._v(" "),_("li",[_("p",[t._v("持有多个数据库文件的数据库连接对于单个数据库时原子的，对于全部数据库是不原子的。")])]),t._v(" "),_("li",[_("p",[t._v("进入WAL模式以后不能修改page的size。")])]),t._v(" "),_("li",[_("p",[t._v('不能打开只读的WAL数据库(Read-Only Databases)，这进程必须有"-shm"文件的写权限。')])]),t._v(" "),_("li",[_("p",[t._v("对于只进行读操作，很少进行写操作的数据库，要慢那么1到2个百分点。")])]),t._v(" "),_("li",[_("p",[t._v('会有多余的"-wal"和"-shm"文件。')])]),t._v(" "),_("li",[_("p",[t._v("需要开发者注意checkpointing检查点。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("参考：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_04-mysql面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_04-mysql面试题"}},[this._v("#")]),this._v(" 04.MySQL面试题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4-1-请你说一说mysql的四种隔离状态（隔离级别）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-请你说一说mysql的四种隔离状态（隔离级别）"}},[this._v("#")]),this._v(" 4.1.请你说一说mysql的四种隔离状态（隔离级别）")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("table",[_("thead",[_("tr",[_("th",[t._v("事务隔离级别")]),t._v(" "),_("th",[t._v("脏读")]),t._v(" "),_("th",[t._v("不可重复读")]),t._v(" "),_("th",[t._v("幻读")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("读未提交（read-uncommitted）")]),t._v(" "),_("td",[t._v("✅")]),t._v(" "),_("td",[t._v("✅")]),t._v(" "),_("td",[t._v("✅")])]),t._v(" "),_("tr",[_("td",[t._v("不可重复读（read-committed）")]),t._v(" "),_("td",[t._v("否")]),t._v(" "),_("td",[t._v("✅")]),t._v(" "),_("td",[t._v("✅")])]),t._v(" "),_("tr",[_("td",[t._v("可重复读（repeatable-read）")]),t._v(" "),_("td",[t._v("否")]),t._v(" "),_("td",[t._v("否")]),t._v(" "),_("td",[t._v("✅")])]),t._v(" "),_("tr",[_("td",[t._v("串行化（serializable）")]),t._v(" "),_("td",[t._v("否")]),t._v(" "),_("td",[t._v("否")]),t._v(" "),_("td",[t._v("否")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4-2-请你介绍一下mysql的mvcc机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-请你介绍一下mysql的mvcc机制"}},[this._v("#")]),this._v(" 4.2.请你介绍一下mysql的MVCC机制")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("MVCC（Multi-Version Concurrency Control，多版本并发控制）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("如上：\n"),e("ul",[e("li",[this._v("逻辑上有：隔离级别")]),this._v(" "),e("li",[this._v("物理实现上有：MVCC啥的")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4-3-请问sql优化方法有哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-请问sql优化方法有哪些"}},[this._v("#")]),this._v(" 4.3.请问SQL优化方法有哪些")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("1、通过"),e("strong",[this._v("建立索引")]),this._v("对查询进行优化")]),this._v(" "),e("li",[this._v("2、对"),e("strong",[this._v("查询进行优化")]),this._v("，应尽量避免全表扫描『或许这就是我们每个人写SQL语句还分级别的地方』")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4-4-说一下mysql引擎的概念和分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-说一下mysql引擎的概念和分类"}},[this._v("#")]),this._v(" 4.4.说一下MySQL引擎的概念和分类")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("MySQL引擎")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("MySQL中的数据用"),e("strong",[this._v("各种不同的技术")]),this._v("存储在文件（或者内存）中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("MyIsam")]),this._v(" "),e("li",[this._v("InnoDB")]),this._v(" "),e("li",[this._v("Memory、Blackhole、CSV、Performance_Schema、Archive、Federated、Mrg_Myisam。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4-5-说一下最常用的2个mysql引擎innodb和mylsam的对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-说一下最常用的2个mysql引擎innodb和mylsam的对比"}},[this._v("#")]),this._v(" 4.5.说一下最常用的2个MySQL引擎InnoDB和Mylsam的对比")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1、mylsam"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、mylsam"}},[this._v("#")]),this._v(" 1、Mylsam")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("适用场景")]),this._v("：")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("p",[t._v("不支持事务的设计，但是并不代表着有事务操作的项目不能用MyIsam存储引擎，可以在service层进行根据自己的业务需求进行相应的控制。")])]),t._v(" "),_("li",[_("p",[t._v("不支持外键的表设计。")])]),t._v(" "),_("li",[_("p",[t._v("查询速度很快，如果数据库insert和update的操作比较多的话比较适用。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("整天对表进行加锁")]),t._v("的场景。")])]),t._v(" "),_("li",[_("p",[t._v("MyISAM极度强调快速读取操作。")])]),t._v(" "),_("li",[_("p",[t._v("MyIASM中存储了表的行数，于是"),_("code",[t._v("SELECT COUNT(*) FROM TABLE")]),t._v("时只需要直接读取已经保存好的值而不需要进行全表扫描。如果表的读操作远远多于写操作且不需要数据库事务的支持，那么MyIASM也是很好的选择。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("缺点")]),this._v("：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("就是不能在表损坏后主动恢复数据。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("索引结构")]),this._v("：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("MyISAM索引用的"),e("strong",[this._v("B+ tree")]),this._v("来储存数据，MyISAM索引的指针指向的是键值的地址，地址存储的是数据。B+Tree的数据域存储的内容为实际数据的地址，也就是说它的索引和实际的数据是分开的，只不过是用索引指向了实际的数据，这种索引就是所谓的"),e("strong",[this._v("非聚集索引")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_2、innodb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、innodb"}},[this._v("#")]),this._v(" 2、InnoDB")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("InnoDB是一个"),e("strong",[this._v("事务型")]),this._v("的存储引擎，有行级锁定和外键约束。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("它的设计目标是"),e("strong",[this._v("处理大容量数据库系统")]),this._v("，它本身其实就是基于MySQL后台的完整数据库系统，MySQL运行时Innodb会在"),e("strong",[this._v("内存")]),this._v("中建立缓冲池，用于缓冲数据和索引。但是该引擎不支持FULLTEXT类型的索引，而且它没有保存表的行数，当"),e("code",[this._v("SELECT COUNT(*) FROM TABLE")]),this._v("时需要扫描全表。当需要使用数据库事务时，该引擎当然是首选。由于锁的粒度更小，写操作不会锁定全表，所以在并发较高时，使用Innodb引擎会提升效率。但是使用行级锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("适用场景")]),this._v("：")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("p",[_("strong",[t._v("经常更新的表")]),t._v("，适合处理多重并发的更新请求。")])]),t._v(" "),_("li",[_("p",[t._v("支持事务。")])]),t._v(" "),_("li",[_("p",[t._v("可以从灾难中恢复（通过bin-log日志等）。")])]),t._v(" "),_("li",[_("p",[t._v("外键约束。只有他支持外键。")])]),t._v(" "),_("li",[_("p",[t._v("支持自动增加列属性auto_increment。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("索引结构")]),this._v("：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("InnoDB也是"),e("strong",[this._v("B+Tree")]),this._v("索引结构。Innodb的索引文件本身就是数据文件，即B+Tree的数据域存储的就是实际的数据，这种索引就是"),e("strong",[this._v("聚集索引")]),this._v("。这个索引的key就是数据表的主键，因此InnoDB表数据文件本身就是主索引。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_3、innodb和mylsam的区别："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、innodb和mylsam的区别："}},[this._v("#")]),this._v(" 3、InnoDB和Mylsam的区别：")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("table",[_("thead",[_("tr",[_("th",[t._v("比较")]),t._v(" "),_("th",[t._v("MyIsam")]),t._v(" "),_("th",[t._v("InnoDB")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("事务")]),t._v(" "),_("td",[t._v("不支持事务处理等高级处理")]),t._v(" "),_("td",[t._v("支持，提供事务支持已经外部键等高级数据库功能")])]),t._v(" "),_("tr",[_("td",[t._v("性能")]),t._v(" "),_("td",[t._v("MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快。")]),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td"),t._v(" "),_("td")]),t._v(" "),_("tr",[_("td"),t._v(" "),_("td"),t._v(" "),_("td")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("因此当表的读操作远远多于写操作，并且不需要事务支持时，可以优先选择MyIasm")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_05-nosql类面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_05-nosql类面试题"}},[this._v("#")]),this._v(" 05.NoSQL类面试题")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-1-请你回答一下2种nosql的区别mongodb和redis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-请你回答一下2种nosql的区别mongodb和redis"}},[this._v("#")]),this._v(" 5.1.请你回答一下2种NoSQL的区别mongodb和redis")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("内存管理")]),this._v("机制上：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Redis 数据")]),e("strong",[this._v("全部存在内存")]),this._v("，"),e("strong",[this._v("定期写入磁盘")]),this._v("，当内存不够时，可以选择指定的 LRU 算法"),e("strong",[this._v("删除")]),this._v("数据。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("MongoDB 数据存在内存，由 linux系统 mmap 实现，当内存不够时，只将"),e("strong",[this._v("热点数据放入内存")]),this._v("，"),e("strong",[this._v("其他数据存在磁盘。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("支持的数据结构")]),this._v("上：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("MongoDB 数据结构比较单一，但是支持丰富的"),e("code",[this._v("数据表达")]),this._v("，索引，最类似关系型数据库，支持的查询语言非常丰富")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"请你来说一下redis和memcached的区别？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请你来说一下redis和memcached的区别？"}},[this._v("#")]),this._v(" 请你来说一下Redis和memcached的区别？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Memcached是一个自由开源的，高性能，分布式内存对象缓存系统。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("1）数据类型 ：")]),this._v(" "),e("ul",[e("li",[this._v("redis数据类型丰富，支持set liset等类型；")]),this._v(" "),e("li",[this._v("memcache支持简单数据类型，需要客户端自己处理复杂对象")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("2）持久性：")]),this._v(" "),e("ul",[e("li",[this._v("redis支持数据落地持久化存储；")]),this._v(" "),e("li",[this._v("memcache不支持数据持久存储。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("3）分布式存储：")]),this._v(" "),e("ul",[e("li",[this._v("redis支持master-slave复制模式；")]),this._v(" "),e("li",[this._v("memcache可以使用一致性hash做分布式。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("4）value大小不同：")]),this._v(" "),e("ul",[e("li",[this._v("memcache是一个内存缓存，key的长度小于250字符，单个item存储要小于1M，不适合虚拟机使用")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("5）数据一致性不同：")]),this._v(" "),e("ul",[e("li",[this._v("redis使用的是单线程模型，保证了数据按顺序提交；")]),this._v(" "),e("li",[this._v("memcache需要使用cas保证数据一致性。CAS（Check and Set）是一个确保并发一致性的机制，属于“乐观锁”范畴；原理很简单：拿版本号，操作，对比版本号，如果一致就操作，不一致就放弃任何操作")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("p",[this._v("6）cpu利用：")]),this._v(" "),e("ul",[e("li",[this._v("redis单线程模型只能使用一个cpu，可以开启多个redis进程")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-2-请你来说一说redis的定时机制怎么实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-请你来说一说redis的定时机制怎么实现的"}},[this._v("#")]),this._v(" 5.2.请你来说一说Redis的定时机制怎么实现的")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("p",[t._v("Redis服务器是一个事件驱动程序，服务器需要处理以下两类事件：")]),t._v(" "),_("ul",[_("li",[t._v("文件事件（服务器对套接字操作的抽象）")]),t._v(" "),_("li",[t._v("时间事件（服务器对定时操作的抽象）。Redis的定时机制就是借助时间事件实现的。")])])]),t._v(" "),_("li",[_("p",[t._v("一个时间事件主要由以下三个属性组成：")]),t._v(" "),_("ul",[_("li",[t._v("id：时间事件标识号；")]),t._v(" "),_("li",[t._v("when：记录时间事件的到达时间；")]),t._v(" "),_("li",[t._v("timeProc：时间事件处理器，当时间事件到达时，服务器就会调用相应的处理器来处理时间。一个时间事件根据时间事件处理器的返回值来判断是定时事件还是周期性事件")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-3-请你来说一说redis是单线程的，但是为什么这么高效呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-请你来说一说redis是单线程的，但是为什么这么高效呢"}},[this._v("#")]),this._v(" 5.3.请你来说一说Redis是单线程的，但是为什么这么高效呢?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("虽然Redis文件事件处理器以单线程方式运行，但是通过使用"),e("strong",[this._v("I/O多路复用")]),this._v("程序来监听多个套接字，文件事件处理器既实现了高性能的网络通信模型，又可以很好地与Redis服务器中其他同样以单线程运行的模块进行对接，这保持了Redis内部单线程设计的简单性。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-4-请自己设计一下如何采用单线程的方式处理高并发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-请自己设计一下如何采用单线程的方式处理高并发"}},[this._v("#")]),this._v(" 5.4.请自己设计一下如何采用单线程的方式处理高并发")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在单线程模型中，可以采用I/O复用来提高单线程处理多个请求的能力，然后再采用"),e("strong",[this._v("事件驱动模型")]),this._v("，基于异步回调来处理事件来")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-5-请问redis的数据类型有哪些，底层怎么实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-请问redis的数据类型有哪些，底层怎么实现"}},[this._v("#")]),this._v(" 5.5.请问Redis的数据类型有哪些，底层怎么实现?")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[t._v("1）字符串：整数值、embstr编码的简单动态字符串、简单动态字符串（SDS)")]),t._v(" "),_("li",[t._v("2）列表：压缩列表、双端链表")]),t._v(" "),_("li",[t._v("3）哈希：压缩列表、字典")]),t._v(" "),_("li",[t._v("4）集合：整数集合、字典")]),t._v(" "),_("li",[t._v("5）有序集合：压缩列表、跳跃表和字典")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-6-请问redis的rehash怎么做的，为什么要渐进rehash，渐进rehash又是怎么实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-请问redis的rehash怎么做的，为什么要渐进rehash，渐进rehash又是怎么实现的"}},[this._v("#")]),this._v(" 5.6.请问Redis的rehash怎么做的，为什么要渐进rehash，渐进rehash又是怎么实现的?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("因为redis是单线程，当K很多时，如果一次性将键值对全部rehash，庞大的计算量会影响服务器性能，甚至可能会导致服务器在一段时间内停止服务。不可能一步完成整个rehash操作，所以redis是"),e("strong",[this._v("分多次")]),this._v("、"),e("strong",[this._v("渐进式")]),this._v("的rehash。"),e("strong",[this._v("渐进性哈希")]),this._v("分为两种：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("1）操作redis时，额外做一步rehash")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("2）后台定时任务调用rehash")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-7-请你回答一下hash表如何rehash，以及怎么处理其中保存的资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-请你回答一下hash表如何rehash，以及怎么处理其中保存的资源"}},[this._v("#")]),this._v(" 5.7.请你回答一下hash表如何rehash，以及怎么处理其中保存的资源")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-8-请问redis怎么实现的定期删除功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-请问redis怎么实现的定期删除功能"}},[this._v("#")]),this._v(" 5.8.请问Redis怎么实现的定期删除功能")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-9-请你说一说redis对应的命令和数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-9-请你说一说redis对应的命令和数据类型"}},[this._v("#")]),this._v(" 5.9.请你说一说Redis对应的命令和数据类型.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("参考：牛客网")])])}],!1,null,null,null);e.default=i.exports}}]);